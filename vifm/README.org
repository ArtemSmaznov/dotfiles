:PROPERTIES:
:ID:       0ae3a9db-655b-47f5-89cc-e55b4e72834b
:END:
#+title:       ViFM
#+author:      Artem Smaznov
#+description: A vim-like terminal file manager
#+startup:     overview
#+property:    header-args :tangle vifmrc
#+auto_tangle: t

* Table of Contents :toc:
- [[#dependencies][Dependencies]]
- [[#general][General]]
- [[#history][History]]
- [[#theme][Theme]]
- [[#search][Search]]
- [[#marks][Marks]]
- [[#session][Session]]
- [[#commands][Commands]]
- [[#file-types][File-types]]
  - [[#info][Info]]
  - [[#directories][Directories]]
  - [[#images][Images]]
  - [[#audio][Audio]]
  - [[#video][Video]]
  - [[#web][Web]]
  - [[#pdf][Pdf]]
  - [[#torrent][Torrent]]
  - [[#archives][Archives]]
  - [[#man-page][Man page]]
  - [[#office-files][Office files]]
  - [[#djvu][Djvu]]
  - [[#epub][Epub]]
  - [[#font][Font]]
  - [[#postscript][PostScript]]
  - [[#object][Object]]
  - [[#openraster][OpenRaster]]
  - [[#mindmap][Mindmap]]
  - [[#md5][MD5]]
  - [[#sha1][SHA1]]
  - [[#sha256][SHA256]]
  - [[#sha512][SHA512]]
  - [[#gpg-signature][GPG signature]]
  - [[#rar2fsmount-and-rar-archives][Rar2FsMount and rar archives]]
  - [[#isomount][IsoMount]]
  - [[#sshmount][SshMount]]
  - [[#ftpmount][FtpMount]]
  - [[#fuse7z-and-7z-archives][Fuse7z and 7z archives]]
  - [[#tudu-files][TuDu files]]
  - [[#qt-projects][Qt projects]]
- [[#syntax-highlighting][Syntax Highlighting]]
- [[#panels][Panels]]
- [[#key-bindings][Key Bindings]]
  - [[#root][Root]]
  - [[#leader][Leader]]
  - [[#g][g]]
  - [[#o][o]]
  - [[#y][y]]
  - [[#z][z]]
  - [[#square-brackets][Square Brackets]]
  - [[#f-keys][F-keys]]
  - [[#alt][Alt]]
  - [[#renaming][Renaming]]
- [[#customization][Customization]]

* Dependencies
|-------------+----------------------------------|
| Name        | Description                      |
|-------------+----------------------------------|
| [[https://archlinux.org/packages/?name=vifm][vifm]]        | A vim-like terminal file manager |
|-------------+----------------------------------|
| [[https://aur.archlinux.org/packages/vifmimg-git][vifmimg-git]] | Graphical image preview          |
| [[https://aur.archlinux.org/packages/fontpreview][fontpreview]] | Fonts preview                    |
| [[https://aur.archlinux.org/packages/taffy][taffy]]       | Audio file info preview          |
| [[https://archlinux.org/packages/?name=libcaca][libcaca]]     | ASCII image preview              |
| [[https://archlinux.org/packages/?name=poppler][poppler]]     | Text PDF preview                 |
|-------------+----------------------------------|

* General
#+begin_src vimrc
set number
set relativenumber

" Command used to edit files in various contexts.  The default is vim.
" If you would like to use another vi clone such as Elvis or Vile
" you will need to change this setting.
set vicmd=vim
" set vicmd=elvis\ -G\ termcap
" set vicmd=vile

" This makes vifm perform file operations on its own instead of relying on
" standard utilities like `cp`.  While using `cp` and alike is a more universal
" solution, it's also much slower when processing large amounts of files and
" doesn't support progress measuring.
set syscalls

" Trash Directory
" The default is to move files that are deleted with dd or :d to
" the trash directory.  If you change this you will not be able to move
" files by deleting them and then using p to put the file in the new location.
" I recommend not changing this until you are familiar with vifm.
" This probably shouldn't be an option.
set trash

" Automatically resolve symbolic links on l or Enter.
set nofollowlinks

" With this option turned on you can run partially entered commands with
" unambiguous beginning using :! (e.g. :!Te instead of :!Terminal or :!Te<tab>).
" set fastrun

" Natural sort of (version) numbers within text.
set sortnumbers

" Use Vim's format of help file (has highlighting and "hyperlinks").
" If you would rather use a plain text help file set novimhelp.
set vimhelp

" If you would like to run an executable file when you
" press Enter, l or Right Arrow, set this.
set norunexec

" Try to leave some space from cursor to upper/lower border in lists
set scrolloff=4

" Don't do too many requests to slow file systems
if !has('win')
    set slowfs=curlftpfs
endif
#+end_src

* History
This is how many directories to store in the directory history.
#+begin_src vimrc
set history=100
#+end_src

Maximum number of changes that can be undone.
#+begin_src vimrc
set undolevels=100
#+end_src

* Theme
List of color schemes to try (picks the first one supported by the terminal)
#+begin_src vimrc
colorscheme base16
#+end_src

Format for displaying time in file list. For example:
=TIME_STAMP_FORMAT=%m/%d-%H:%M=
See man date or man strftime for details.
#+begin_src vimrc
set timefmt="%l:%M%P %e-%b-%Y "
#+end_src

Set custom status line look
#+begin_src vimrc
set statusline="%[%T %] %= %2*%A  %6*%5u:%g  %3*%E/%a  %4*%d"
#+end_src

Getting icons to display in vifm
#+begin_src vimrc
" file types
set classify=' :dir:/, :exe:, :reg:, :link:'
" various file names
set classify+=' ::../::, ::*.sh::, ::*.[hc]pp::, ::*.[hc]::, ::/^copying|license$/::, ::.git/,,*.git/::, ::*.epub,,*.fb2,,*.djvu::, ::*.pdf::, ::*.htm,,*.html,,**.[sx]html,,*.xml::'
" archives
set classify+=' ::*.7z,,*.ace,,*.arj,,*.bz2,,*.cpio,,*.deb,,*.dz,,*.gz,,*.jar,,*.lzh,,*.lzma,,*.rar,,*.rpm,,*.rz,,*.tar,,*.taz,,*.tb2,,*.tbz,,*.tbz2,,*.tgz,,*.tlz,,*.trz,,*.txz,,*.tz,,*.tz2,,*.xz,,*.z,,*.zip,,*.zoo::'
" images
set classify+=' ::*.bmp,,*.gif,,*.jpeg,,*.jpg,,*.ico,,*.png,,*.ppm,,*.svg,,*.svgz,,*.tga,,*.tif,,*.tiff,,*.xbm,,*.xcf,,*.xpm,,*.xspf,,*.xwd::'
" audio
set classify+=' ::*.aac,,*.anx,,*.asf,,*.au,,*.axa,,*.flac,,*.m2a,,*.m4a,,*.mid,,*.midi,,*.mp3,,*.mpc,,*.oga,,*.ogg,,*.ogx,,*.ra,,*.ram,,*.rm,,*.spx,,*.wav,,*.wma,,*.ac3::'
" media
set classify+=' ::*.avi,,*.ts,,*.axv,,*.divx,,*.m2v,,*.m4p,,*.m4v,,.mka,,*.mkv,,*.mov,,*.mp4,,*.flv,,*.mp4v,,*.mpeg,,*.mpg,,*.nuv,,*.ogv,,*.pbm,,*.pgm,,*.qt,,*.vob,,*.wmv,,*.xvid::'
" office files
set classify+=' ::*.doc,,*.docx::, ::*.xls,,*.xls[mx]::, ::*.pptx,,*.ppt::'
#+end_src

* Search
#+begin_src vimrc
" Show list of matches on tab completion in command-line mode
set wildmenu

" Display completions in a form of popup with descriptions of the matches
set wildstyle=popup

" Display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files).  In other view, when available.
set suggestoptions=normal,visual,view,otherpane,keys,foldsubkeys,marks,registers

" Ignore case in search patterns unless it contains at least one uppercase
" letter
set ignorecase
set smartcase

" Don't highlight search results automatically
set nohlsearch

" Use increment searching (search while typing)
set incsearch
#+end_src

* Marks
#+begin_src vimrc
mark a /home/amadeus
mark b ~/.local/bin
mark c ~/.config
mark d ~/documents
mark D ~/downloads
mark E /etc
mark f ~/documents/finance
mark g ~/games
mark h ~
mark i ~/music/import
mark m ~/music
mark M /run/mount
mark p ~/pictures
mark P ~/photos
mark r ~/videos/recordings
mark s ~/pictures/screenshots
mark T /tmp
mark v ~/videos
mark w ~/pictures/wallpapers
mark z ~/zmedia
#+end_src

* Session
| =bmarks=    | named bookmarks (see vifm-:bmark)                                                       |
| =bookmarks= | marks, except special ones like '< and '>                                               |
| =tui=       | state of the user interface (sorting, number of windows, quick view state, active view) |
| =dhistory=  | directory history                                                                       |
| =state=     | file name and dot filters and terminal multiplexers integration state                   |
| =cs=        | primary color scheme                                                                    |
| =savedirs=  | save last visited directory                                                             |
| =chistory=  | command line history                                                                    |
| =ehistory=  | expression register history (see vifm-c_Ctrl-R_=)                                       |
| =shistory=  | search history (/ and ? commands)                                                       |
| =phistory=  | prompt history                                                                          |
| =fhistory=  | history of local filter (see vifm-=)                                                    |
| =dirstack=  | directory stack overwrites previous stack, unless stack of current instance is empty    |
| =registers= | registers content                                                                       |
| =tabs=      | global or pane tabs                                                                     |
| =options=   | all options that can be set with the :set command (obsolete)                            |
| =filetypes= | associated programs and viewers (obsolete)                                              |
| =commands=  | user defined commands (see :command description) (obsolete)                             |

#+begin_src vimrc
set vifminfo=bmarks,tui,dhistory,state,savedirs,chistory,shistory,phistory,fhistory,dirstack,registers
#+end_src

* Commands
#+begin_src vimrc
" :com[mand][!] command_name action
" The following macros can be used in a command
" %a is replaced with the user arguments.
" %c the current file under the cursor.
" %C the current file under the cursor in the other directory.
" %f the current selected file, or files.
" %F the current selected file, or files in the other directory.
" %b same as %f %F.
" %d the current directory name.
" %D the other window directory name.
" %m run the command in a menu window

command! df df -h %m 2> /dev/null
command! diff vim -d %f %F
command! zip zip -r %f.zip %f
command! run !! ./%f
command! make !!make %a
command! mkdirg :mkdir %a | cd %a
command! vgrep vim "+grep %a"
command! reload :write | restart full
#+end_src

* File-types
** Info
The file type is for the default programs to be used with
a file extension.
:filetype pattern1,pattern2 defaultprogram,program2
:fileviewer pattern1,pattern2 consoleviewer
The other programs for the file type can be accessed with the :file command
The command macros like %f, %F, %d, %D may be used in the commands.
The %a macro is ignored.  To use a % you must put %%.

For automated FUSE mounts, you must register an extension with :file[x]type
in one of following formats:

:filetype extensions FUSE_MOUNT|some_mount_command using %SOURCE_FILE and %DESTINATION_DIR variables
%SOURCE_FILE and %DESTINATION_DIR are filled in by vifm at runtime.
A sample line might look like this:
:filetype *.zip,*.jar,*.war,*.ear FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR

:filetype extensions FUSE_MOUNT2|some_mount_command using %PARAM and %DESTINATION_DIR variables
%PARAM and %DESTINATION_DIR are filled in by vifm at runtime.
A sample line might look like this:
:filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
%PARAM value is filled from the first line of file (whole line).
Example first line for SshMount filetype: root@127.0.0.1:/

You can also add %CLEAR if you want to clear screen before running FUSE
program.

** Directories
#+begin_src vimrc
filextype */
        \ {Show disk usage} du -h %f | less,
#+end_src

** Images
#+begin_src vimrc
filextype {*.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm},<image/*>
        \ {View in vimiv} vimiv %f,
        \ {Preview using mpv} mpv -vo tct %f,
        \ {Preview as ASCII} img2txt %c,
        \ {View file info} identify %f %m,
fileviewer {*.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm},<image/*>
         " \ vifmimg draw %px %py %pw %ph %c
         " \ %pc
         " \ vifmimg clear
         " \ {ASCII image preview}
         " \ img2txt %c
         " \ {File info}
         \ identify %f
#+end_src

** Audio
#+begin_src vimrc
filetype {*.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus},<audio/*>
       \ {Play using mpv} mpv %c,
       \ {Play using ffplay} ffplay -nodisp -autoexit %c,
fileviewer {*.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus},<audio/mpeg>
        \ taffy
" fileviewer {*.mp3},<audio/mpeg> mp3info
" fileviewer {*.flac},<audio/flac> soxi
#+end_src

** Video
#+begin_src vimrc
filextype {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
          \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
          \*.as[fx]},<video/*>
        \ {View using mpv} mpv %f,
        \ {Preview using mpv} mpv -vo tct %f,
        \ {View using ffplay} ffplay -fs -autoexit %f,
fileviewer {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
           \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
           \*.as[fx]},<video/*>
         \ ffprobe -pretty %c 2>&1
#+end_src

** Web
#+begin_src vimrc
filextype {*.html,*.htm},<text/html>
        \ {Open with qutebrowser} qutebrowser %f %i &,
        \ {Open with firefox} firefox %f &,
filetype {*.html,*.htm},<text/html>
        \ {View in lynx} lynx,
        \ {View in links} links,
#+end_src

** Pdf
#+begin_src vimrc
filextype {*.pdf},<application/pdf>
        \ {View in zathura} zathura %c %i &,
        \ {View in okular} okular %c,
fileviewer {*.pdf},<application/pdf>
         \ vifmimg pdf %px %py %pw %ph %c
         \ %pc
         \ vifmimg clear
        " \ pdftotext -nopgbrk %c -
#+end_src

** Torrent
#+begin_src vimrc
filetype {*.torrent},<application/x-bittorrent>
       \ ktorrent %f &
fileviewer {*.torrent},<application/x-bittorrent> dumptorrent -v %c
#+end_src

** Archives
#+begin_src vimrc
filetype {*.zip,*.jar,*.war,*.ear,*.oxt,*.apkg},<application/zip,application/java-archive>
       \ {Mount with fuse-zip} FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR,
       \ {View contents} zip -sf %c | less,
       \ {Extract here} tar -xf %c,
fileviewer *.zip,*.jar,*.war,*.ear,*.oxt
       \ zip -sf %c
       \ echo "No zip to preview:"
#+end_src

#+begin_src vimrc
filetype {*.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz},<application/x-tar>
       \ {Mount with archivemount} FUSE_MOUNT|archivemount %SOURCE_FILE %DESTINATION_DIR,
fileviewer *.tgz,*.tar.gz
       \ tar -tzf %c
fileviewer *.tar.bz2,*.tbz2
       \ tar -tjf %c
fileviewer *.tar.txz,*.txz
       \ xz --list %c
fileviewer {*.tar},<application/x-tar>
       \ tar -tf %c
#+end_src

** Man page
#+begin_src vimrc
filetype {*.[1-8]},<text/troff> man ./%c
fileviewer {*.[1-8]},<text/troff> man ./%c | col -b
#+end_src

** Office files
#+begin_src vimrc
filextype {*.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx,*.ppt},
         \<application/vnd.openxmlformats-officedocument.*,
          \application/msword,
          \application/vnd.ms-excel>
        \ libreoffice %f &
fileviewer {*.doc},<application/msword> catdoc %c
fileviewer {*.docx},
          \<application/
           \vnd.openxmlformats-officedocument.wordprocessingml.document>
         \ docx2txt.pl %f -
#+end_src

** Djvu
#+begin_src vimrc
filextype {*.djvu},<image/vnd.djvu>
        \ {View in zathura}
        \ zathura %f,
        \ {View in apvlv}
        \ apvlv %f,
fileviewer *.djvu
         \ {Proper preview}
         \ vifmimg djvu %px %py %pw %ph %c
         \ %pc
         \ vifmimg clear
#+end_src

** Epub
#+begin_src vimrc
fileviewer *.epub
         \ {Proper preview}
         \ vifmimg epub %px %py %pw %ph %c
         \ %pc
         \ vifmimg clear
#+end_src

** Font
#+begin_src vimrc
fileviewer <font/*>
         \ vifmimg font %px %py %pw %ph %c
         \ %pc
         \ vifmimg clear
#+end_src

** PostScript
#+begin_src vimrc
filextype {*.ps,*.eps,*.ps.gz},<application/postscript>
        \ {View in zathura}
        \ zathura %f,
        \ {View in gv}
        \ gv %c %i &,
#+end_src

** Object
#+begin_src vimrc
filetype {*.o},<application/x-object> nm %f | less
#+end_src

** OpenRaster
#+begin_src vimrc
filextype *.ora
        \ {Edit in MyPaint}
        \ mypaint %f,
#+end_src

** Mindmap
#+begin_src vimrc
filextype *.vym
        \ {Open with VYM}
        \ vym %f &,
#+end_src

** MD5
#+begin_src vimrc
filetype *.md5
       \ {Check MD5 hash sum}
       \ md5sum -c %f %S,
#+end_src

** SHA1
#+begin_src vimrc
filetype *.sha1
       \ {Check SHA1 hash sum}
       \ sha1sum -c %f %S,
#+end_src

** SHA256
#+begin_src vimrc
filetype *.sha256
       \ {Check SHA256 hash sum}
       \ sha256sum -c %f %S,
#+end_src

** SHA512
#+begin_src vimrc
filetype *.sha512
       \ {Check SHA512 hash sum}
       \ sha512sum -c %f %S,
#+end_src

** GPG signature
#+begin_src vimrc
filetype {*.asc},<application/pgp-signature>
       \ {Check signature}
       \ !!gpg --verify %c,
#+end_src

** Rar2FsMount and rar archives
#+begin_src vimrc
filetype {*.rar},<application/x-rar>
       \ {Mount with rar2fs}
       \ FUSE_MOUNT|rar2fs %SOURCE_FILE %DESTINATION_DIR,
fileviewer {*.rar},<application/x-rar> unrar v %c
#+end_src

** IsoMount
#+begin_src vimrc
filetype {*.iso},<application/x-iso9660-image>
       \ {Mount with fuseiso}
       \ FUSE_MOUNT|fuseiso %SOURCE_FILE %DESTINATION_DIR,
#+end_src

** SshMount
#+begin_src vimrc
filetype *.ssh
       \ {Mount with sshfs}
       \ FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR %FOREGROUND,
#+end_src

** FtpMount
#+begin_src vimrc
filetype *.ftp
       \ {Mount with curlftpfs}
       \ FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR %FOREGROUND,
#+end_src

** Fuse7z and 7z archives
#+begin_src vimrc
filetype {*.7z},<application/x-7z-compressed>
       \ {Mount with fuse-7z}
       \ FUSE_MOUNT|fuse-7z %SOURCE_FILE %DESTINATION_DIR,
fileviewer {*.7z},<application/x-7z-compressed> 7z l %c
#+end_src

** TuDu files
#+begin_src vimrc
filetype *.tudu tudu -f %c
#+end_src

** Qt projects
#+begin_src vimrc
filextype *.pro qtcreator %f &
#+end_src

* Syntax Highlighting
#+begin_src vimrc
" Syntax highlighting in preview
"
" Explicitly set highlight type for some extensions
"
" 256-color terminal
" fileviewer *.[ch],*.[ch]pp highlight -O xterm256 -s dante --syntax c %c
" fileviewer Makefile,Makefile.* highlight -O xterm256 -s dante --syntax make %c
"
" 16-color terminal
" fileviewer *.c,*.h highlight -O ansi -s dante %c
"
" Or leave it for automatic detection
"
" fileviewer *[^/] pygmentize -O style=monokai -f console256 -g

" Displaying pictures in terminal
"
" fileviewer *.jpg,*.png shellpic %c

" Open all other files with default system programs (you can also remove all
" :file[x]type commands above to ensure they don't interfere with system-wide
" settings).  By default all unknown files are opened with 'vi[x]cmd'
" uncommenting one of lines below will result in ignoring 'vi[x]cmd' option
" for unknown file types.
" For *nix:
" filetype * xdg-open
" For OS X:
" filetype * open
" For Windows:
" filetype * start, explorer
#+end_src

* Panels
Examples of configuring both panels
Customize view columns a bit (enable ellipsis for truncated file names)
#+begin_src vimrc
set viewcolumns=-{name}..,6{}.
#+end_src

Filter-out build and temporary files
#+begin_src vimrc
" filter! {*.lo,*.o,*.d,*.class,*.pyc,*.pyo,.*~}
#+end_src

* Key Bindings
** Root
Unbind
#+begin_src vimrc
nmap t <nop>
nmap o <nop>
" nmap i :setl previewprg='identify %c'<cr>:view<cr>
#+end_src

Previews
#+begin_src vimrc
nnoremap w :view<cr>
vnoremap w :view<cr>gv

" exit preview mode
" nnoremap <space>wz <c-w>z
#+end_src

#+begin_src vimrc
nnoremap s :shell<cr>
" display sorting dialog
nnoremap S :sort<cr>
#+end_src

#+begin_src vimrc
nnoremap x t
nnoremap i <c-g>
#+end_src

#+begin_src vimrc
nnoremap O :file<cr>
#+end_src

** Leader
#+begin_src vimrc
nmap <space> <nop>
#+end_src
*** Root
#+begin_src vimrc
nnoremap <wait> <space>' /<cr>
#+end_src

*** TAB -> workspace
#+begin_src vimrc
nnoremap <space><Tab>1 :tabnext 1<cr>
nnoremap <space><Tab>2 :tabnext 2<cr>
nnoremap <space><Tab>3 :tabnext 3<cr>
nnoremap <space><Tab>4 :tabnext 4<cr>
nnoremap <space><Tab>5 :tabnext 5<cr>
nnoremap <space><Tab>6 :tabnext 6<cr>
nnoremap <space><Tab>7 :tabnext 7<cr>
nnoremap <space><Tab>8 :tabnext 8<cr>
nnoremap <space><Tab>9 :tabnext 9<cr>
nnoremap <space><Tab>[ :tabprevious<cr>
nnoremap <space><Tab>] :tabnext<cr>
nnoremap <space><Tab>c :tabclose<cr>
nnoremap <space><Tab>d :tabclose<cr>
nnoremap <space><Tab>n :tabnew<cr>
nnoremap <space><Tab>r :tabname<space>
nnoremap <space><Tab>O :tabonly<cr>
#+end_src

*** h -> help
#+begin_src vimrc
nmap <space>h<esc> <nop>
#+end_src

#+begin_src vimrc
nnoremap <space>hr :restart<cr>
#+end_src

*** o -> open
#+begin_src vimrc
map <space>o<esc> <nop>
#+end_src

#+begin_src vimrc
nnoremap <space>ot :!alacritty &<cr>
#+end_src

*** q -> quit
#+begin_src vimrc
map <space>q<esc> <nop>
#+end_src

#+begin_src vimrc
nnoremap <space>qq :q<cr>
#+end_src

*** t -> toggle
#+begin_src vimrc
map <space>t<esc> <nop>
#+end_src

#+begin_src vimrc
nnoremap <space>t. :set dotfiles!<cr>
nnoremap <space>tl :set number!<cr>:set relativenumber!<cr>
nnoremap <space>tm :set millerview!<cr>
nnoremap <space>tu :hideui<cr>
nnoremap <space>tw :set wrap!<cr>
#+end_src

*** w -> window
#+begin_src vimrc
map <space>w<esc> <nop>
#+end_src

#+begin_src vimrc
nnoremap <space>w+ 5<c-w>+
nnoremap <space>w- 5<c-w>-
nnoremap <space>w< 5<c-w>-
nnoremap <space>w= <c-w>=
nnoremap <space>w> 5<c-w>+
nnoremap <space>w_ <c-w>_
nnoremap <space>wc :compare<cr>
nnoremap <space>wb <c-w>b
nnoremap <space>wh <c-w>h
nnoremap <space>wH <c-w>H
nnoremap <space>wj <c-w>j
nnoremap <space>wJ <c-w>J
nnoremap <space>wk <c-w>k
nnoremap <space>wK <c-w>K
nnoremap <space>wl <c-w>l
nnoremap <space>wL <c-w>L
nnoremap <space>wo <c-w>o
nnoremap <space>wp <c-w>p
nnoremap <space>ws <c-w>s
nnoremap <space>wt <c-w>t
nnoremap <space>wv <c-w>v
nnoremap <space>w| <c-w>|
#+end_src

#+begin_src vimrc
" Open current directory in the other pane
nnoremap <space>ww :sync<cr>

" Open directory under cursor in the other pane
nnoremap <a-o> :sync %c<cr>
#+end_src

** g
#+begin_src vimrc
" Open file in the background using its default program
nnoremap gb :file &<cr>l<esc>echo "open in background"<cr>
#+end_src

** o
#+begin_src vimrc
" Start shell in current directory
nnoremap ot :shell<cr>
#+end_src

** y
Interaction with system clipboard
#+begin_src vimrc
if has('win')
    " Yank current directory path to Windows clipboard with forward slashes
    nnoremap yp :!echo %"d:gs!\!/! %i | clip<cr>
    " Yank path to current file to Windows clipboard with forward slashes
    nnoremap yf :!echo %"c:gs!\!/! %i | clip<cr>
elseif executable('xclip')
    " Yank current directory path into the clipboard
    nnoremap yd :!echo %d | xclip %i<cr>
    " Yank current file path into the clipboard
    nnoremap yf :!echo %c:p | xclip %i<cr>
elseif executable('xsel')
    " Yank current directory path into primary and selection clipboards
    nnoremap yd :!echo -n %d | xsel --input --primary %i &&
                \ echo -n %d | xsel --clipboard --input %i<cr>
    " Yank current file path into into primary and selection clipboards
    nnoremap yf :!echo -n %c:p | xsel --input --primary %i &&
                \ echo -n %c:p | xsel --clipboard --input %i<cr>
endif
#+end_src

** z
#+begin_src vimrc
nnoremap z. :set dotfiles!<cr>
#+end_src

** Square Brackets
#+begin_src vimrc
nnoremap [w :tabprevious<cr>
nnoremap ]w :tabnext<cr>
#+end_src

** F-keys
Example of standard two-panel file managers mappings
#+begin_src vimrc
nnoremap <f2> cw
vnoremap <f2> cw
nnoremap <f3> :!less %f<cr>
nnoremap <f4> :edit<cr>
nnoremap <f5> :copy<cr>
nnoremap <f6> :move<cr>
nnoremap <f7> :mkdir<space>
nnoremap <f8> :delete<cr>
#+end_src

** Alt
#+begin_src vimrc
nnoremap <a-x> :
#+end_src

** Renaming
#+begin_src vimrc
" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap cc cw<c-u>
nnoremap A cw
#+end_src

* Customization
#+begin_src vimrc
" Various customization examples

" Use ag (the silver searcher) instead of grep
"
" set grepprg='ag --line-numbers %i %a %s'

" Add additional place to look for executables
"
" let $PATH = $HOME.'/bin/fuse:'.$PATH

" Block particular shortcut
"
" nnoremap <left> <nop>

" Export IPC name of current instance as environment variable and use it to
" communicate with the instance later.
"
" It can be used in some shell script that gets run from inside vifm, for
" example, like this:
"     vifm --server-name "$VIFM_SERVER_NAME" --remote +"cd '$PWD'"
"
" let $VIFM_SERVER_NAME = v:servername
#+end_src
