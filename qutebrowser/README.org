:PROPERTIES:
:ID:       9f4832c8-9a75-4170-9f75-0205959f830c
:END:
#+title:       QuteBrowser
#+author:      Artem Smaznov
#+description: A vim-like minimalist web browser
#+startup:     overview
#+property:    header-args :tangle config.py
#+auto_tangle: t

* Table of Contents :toc:
- [[#documentation][Documentation]]
- [[#dependencies][Dependencies]]
- [[#imports][Imports]]
- [[#theme][Theme]]
  - [[#fonts][Fonts]]
  - [[#window][Window]]
  - [[#completion-widget][Completion Widget]]
  - [[#which-key][Which Key]]
  - [[#context-menu][Context Menu]]
  - [[#downloads][Downloads]]
  - [[#hints][Hints]]
  - [[#prompts][Prompts]]
  - [[#status-bar][Status Bar]]
  - [[#tabs][Tabs]]
  - [[#messages][Messages]]
  - [[#web-pages][Web Pages]]
  - [[#dark-mode][Dark Mode]]
- [[#behavior][Behavior]]
  - [[#backend][Backend]]
  - [[#changelog][Changelog]]
  - [[#autocompletion][Autocompletion]]
  - [[#full-screen][Full Screen]]
  - [[#headers][Headers]]
  - [[#scrolling][Scrolling]]
  - [[#zooming][Zooming]]
  - [[#other][Other]]
  - [[#new-instance][New Instance]]
- [[#search-engines][Search Engines]]
- [[#aliases][Aliases]]
- [[#sessions][Sessions]]
  - [[#auto-save][Auto Save]]
  - [[#history][History]]
- [[#tabs-1][Tabs]]
  - [[#visuals][Visuals]]
  - [[#behavior-1][Behavior]]
- [[#status-bar-1][Status Bar]]
- [[#downloads-1][Downloads]]
- [[#key-bindings][Key Bindings]]
  - [[#unbind][Unbind]]
  - [[#modes][Modes]]
- [[#new-key-bindings][New Key Bindings]]
  - [[#info][Info]]
  - [[#root][root]]
  - [[#-hints][; hints]]
  - [[#brackets][brackets]]
  - [[#b-bookmarks--quickmarks][b bookmarks / quickmarks]]
  - [[#c-clear][c clear]]
  - [[#d-download][d download]]
  - [[#g-goto][g goto]]
  - [[#p-pass--paste][p pass / paste]]
  - [[#s-set][s set]]
  - [[#t-tabs][t tabs]]
  - [[#w-window][w window]]
  - [[#y-yanking][y yanking]]
  - [[#z-cycle-config][z cycle config]]
  - [[#misc][misc]]
  - [[#leader][leader]]
- [[#privacy][Privacy]]
  - [[#youtube-add-blocking][YouTube Add Blocking]]
  - [[#ad-blocking][Ad Blocking]]
  - [[#cookies][Cookies]]
  - [[#cache][Cache]]
- [[#permissions][Permissions]]
- [[#javascript][JavaScript]]
- [[#notifications][Notifications]]
- [[#spell-checking][Spell Checking]]
  - [[#valid-values][Valid values]]
- [[#hints-1][Hints]]
- [[#which-key-1][Which Key]]
- [[#editor][Editor]]
- [[#content][Content]]
- [[#history-1][History]]
- [[#file-select][File Select]]
- [[#input][Input]]
- [[#search][Search]]
- [[#mouse][Mouse]]
  - [[#tabs-2][Tabs]]
- [[#qt][Qt]]
- [[#logging][Logging]]
- [[#overwrites][Overwrites]]

* Documentation
=qute://help/configuring.html=
=qute://help/settings.html=

* Dependencies
|-----------------------+------------------------------------|
| Name                  | Description                        |
|-----------------------+------------------------------------|
| [[https://archlinux.org/packages/?name=qutebrowser][qutebrowser]]           | A vim-like minimalist web browser  |
| (optional) [[https://archlinux.org/packages/?name=mpv][mpv]]        | A vim-like minimalist media player |
| (optional) [[https://archlinux.org/packages/?name=youtube-dl][youtube-dl]] | View YouTube videos in =mpv=         |
|-----------------------+------------------------------------|

#+begin_example shell
sudo pacman -S qutebrowser mpv youtube-dl
#+end_example

* Imports
#+begin_src python
import os

from qutebrowser.api import interceptor
#+end_src

Import theme
#+begin_src python
import themes.default as theme
#+end_src

* Theme
** Fonts
#+begin_src python
c.fonts.default_size = '12pt'
c.fonts.default_family = ["Hack Nerd Font", "Hack Nerd Font Regular", 'Lato']

# c.fonts.completion.category = 'bold default_size default_family'
# c.fonts.completion.entry = 'default_size default_family'
# c.fonts.contextmenu = None
# c.fonts.debug_console = 'default_size default_family'
# c.fonts.downloads = 'default_size default_family'
# c.fonts.hints = 'bold default_size default_family'
# c.fonts.keyhint = 'default_size default_family'
# c.fonts.messages.error = 'default_size default_family'
# c.fonts.messages.info = 'default_size default_family'
# c.fonts.messages.warning = 'default_size default_family'
# c.fonts.prompts = 'default_size sans-serif'
# c.fonts.statusbar = 'default_size default_family'
# c.fonts.tabs.selected = 'default_size default_family'
# c.fonts.tabs.unselected = 'default_size default_family'
# c.fonts.web.family.cursive = ''
# c.fonts.web.family.fantasy = ''
# c.fonts.web.family.fixed = ''
# c.fonts.web.family.sans_serif = ''
# c.fonts.web.family.serif = ''
# c.fonts.web.family.standard = ''
# c.fonts.web.size.default = 16
# c.fonts.web.size.default_fixed = 13
# c.fonts.web.size.minimum = 0
# c.fonts.web.size.minimum_logical = 6
#+end_src

** Window
Setting the main window background to transparent allows having a transparent tab- or statusbar (might require a compositor such as picom). However, it breaks some functionality such as dmenu embedding via its =-w= option. On some systems, it was additionally reported that main window transparency negatively affects performance.  Note this setting only affects windows opened after setting it.
#+begin_src python
# c.window.hide_decoration = False
# c.window.title_format = '{perc}{current_title}{title_sep}qutebrowser'
c.window.transparent = False
#+end_src

** Completion Widget
Mini-buffer for completing commands

Color of the completion widget category headers.
#+begin_src python
c.colors.completion.category.fg = theme.title
c.colors.completion.category.bg = theme.background
c.colors.completion.category.border.top = theme.background
c.colors.completion.category.border.bottom = theme.background
#+end_src

Colors of the main body of the completion widget.
#+begin_src python
# c.colors.completion.fg = ['white', 'white', 'white']
c.colors.completion.fg = theme.foreground
c.colors.completion.match.fg = theme.completion_match
c.colors.completion.odd.bg = theme.completion_odd
c.colors.completion.even.bg = theme.completion_even

c.colors.completion.item.selected.fg = theme.foreground
c.colors.completion.item.selected.bg = theme.completion_selected
c.colors.completion.item.selected.border.top = theme.completion_borders
c.colors.completion.item.selected.border.bottom = theme.completion_borders
c.colors.completion.item.selected.match.fg = theme.match
#+end_src

Color of the scroll-bar in the completion view.
#+begin_src python
c.colors.completion.scrollbar.fg = theme.foreground
c.colors.completion.scrollbar.bg = theme.background
#+end_src

** Which Key
#+begin_src python
c.colors.keyhint.fg = theme.prompt_fg
c.colors.keyhint.bg = theme.prompt_bg
c.colors.keyhint.suffix.fg = theme.match
c.keyhint.radius = theme.radius
#+end_src

** Context Menu
#+begin_src python
c.colors.contextmenu.menu.fg = theme.foreground
c.colors.contextmenu.menu.bg = theme.background

c.colors.contextmenu.selected.fg = theme.foreground
c.colors.contextmenu.selected.bg = theme.contextmenu_selected_bg

c.colors.contextmenu.disabled.fg = theme.contextmenu_disabled_fg
c.colors.contextmenu.disabled.bg = theme.contextmenu_disabled_bg
#+end_src

** Downloads
#+begin_src python
c.colors.downloads.bar.bg = theme.background

c.colors.downloads.start.fg = theme.background
c.colors.downloads.start.bg = theme.loading

c.colors.downloads.stop.fg = theme.background
c.colors.downloads.stop.bg = theme.success

c.colors.downloads.error.fg = theme.error
#+end_src

Color gradient interpolation system for downloads
Valid values:
- =rgb=: Interpolate in the RGB color system.
- =hsv=: Interpolate in the HSV color system.
- =hsl=: Interpolate in the HSL color system.
- =none=: Don't show a gradient.
#+begin_src python
c.colors.downloads.system.fg = 'rgb'
c.colors.downloads.system.bg = 'rgb'
#+end_src

** Hints
#+begin_src python
# c.colors.hints.bg = 'qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 rgba(255, 247, 133, 0.8), stop:1 rgba(255, 197, 66, 0.8))'

c.colors.hints.fg = theme.background
c.colors.hints.bg = theme.hint_bg
c.colors.hints.match.fg = theme.foreground
#+end_src

** Prompts
#+begin_src python
c.colors.prompts.fg = theme.prompt_fg
c.colors.prompts.bg = theme.prompt_bg

c.colors.prompts.selected.fg = theme.prompt_fg
c.colors.prompts.selected.bg = theme.prompt_selected_bg

c.colors.prompts.border = theme.background
#+end_src

** Status Bar
#+begin_src python
# Color of the statusbar.
c.colors.statusbar.normal.fg = theme.status_normal_fg
c.colors.statusbar.normal.bg = theme.status_normal_bg

# Color of the statusbar in insert mode.
c.colors.statusbar.insert.fg = theme.status_insert_fg
c.colors.statusbar.insert.bg = theme.status_insert_bg

# Color of the statusbar in passthrough mode.
c.colors.statusbar.passthrough.fg = theme.status_passthrough_fg
c.colors.statusbar.passthrough.bg = theme.status_passthrough_bg

# Color of the statusbar in private browsing mode.
c.colors.statusbar.private.fg = theme.status_private_fg
c.colors.statusbar.private.bg = theme.status_private_bg

# Color of the statusbar in command mode.
c.colors.statusbar.command.fg = theme.status_command_fg
c.colors.statusbar.command.bg = theme.status_command_bg

# Color of the statusbar in private browsing + command mode.
c.colors.statusbar.command.private.fg = theme.status_command_private_fg
c.colors.statusbar.command.private.bg = theme.status_command_private_bg

# Color of the statusbar in caret mode.
c.colors.statusbar.caret.fg = theme.status_caret_fg
c.colors.statusbar.caret.bg = theme.status_caret_bg

# Color of the statusbar in caret mode with a selection.
c.colors.statusbar.caret.selection.fg = theme.status_caret_selection_fg
c.colors.statusbar.caret.selection.bg = theme.status_caret_selection_bg

# Color of the progress bar.
c.colors.statusbar.progress.bg = theme.loading
#+end_src

URL
Default foreground colors of the URL in the statusbar.
- loading
- successful load (=http= vs =https=)
- hovered links
- warning
- error

#+begin_src python
c.colors.statusbar.url.fg = theme.loading
c.colors.statusbar.url.success.http.fg = theme.insecure
c.colors.statusbar.url.success.https.fg = theme.tab_selected
c.colors.statusbar.url.hover.fg = theme.foreground
c.colors.statusbar.url.warn.fg = theme.warning
c.colors.statusbar.url.error.fg = theme.error
#+end_src

** Tabs
Tab Bar
#+begin_src python
c.colors.tabs.bar.bg = theme.background
#+end_src

Tab Indicator
#+begin_src python
# Color gradient for the tab indicator.
c.colors.tabs.indicator.start = theme.loading
c.colors.tabs.indicator.stop = theme.tab_indicator

# Color for the tab indicator on errors.
c.colors.tabs.indicator.error = theme.error

# Color gradient interpolation system for the tab indicator.
# Type: ColorSystem
# Valid values:
# - rgb: Interpolate in the RGB color system.
# - hsv: Interpolate in the HSV color system.
# - hsl: Interpolate in the HSL color system.
# - none: Do not show a gradient.
# c.colors.tabs.indicator.system = 'rgb'
#+end_src

Unselected Tabs
#+begin_src python
c.colors.tabs.odd.fg = theme.foreground
c.colors.tabs.odd.bg = theme.tab_odd
c.colors.tabs.even.fg = theme.foreground
c.colors.tabs.even.bg = theme.tab_even
c.colors.tabs.pinned.odd.fg = theme.foreground
c.colors.tabs.pinned.odd.bg = theme.tab_odd
c.colors.tabs.pinned.even.fg = theme.foreground
c.colors.tabs.pinned.even.bg = theme.tab_even
#+end_src

Selected Tabs
#+begin_src python
c.colors.tabs.selected.odd.fg = theme.background
c.colors.tabs.selected.odd.bg = theme.tab_selected
c.colors.tabs.selected.even.fg = theme.background
c.colors.tabs.selected.even.bg = theme.tab_selected
c.colors.tabs.pinned.selected.odd.fg = theme.background
c.colors.tabs.pinned.selected.odd.bg = theme.tab_selected
c.colors.tabs.pinned.selected.even.fg = theme.background
c.colors.tabs.pinned.selected.even.bg = theme.tab_selected
#+end_src

** Messages
Color of messages
Type: =QssColor=
#+begin_src python
c.colors.messages.info.fg = theme.foreground
c.colors.messages.info.bg = theme.background
c.colors.messages.info.border = theme.background

c.colors.messages.warning.fg = theme.background
c.colors.messages.warning.bg = theme.warning
c.colors.messages.warning.border = theme.warning

c.colors.messages.error.fg = theme.background
c.colors.messages.error.bg = theme.error
c.colors.messages.error.border = theme.error
#+end_src

Duration (in milliseconds) to show messages in the statusbar for. Set to 0 to never clear messages.
Type: Int
- Default: 3000
#+begin_src python
c.messages.timeout = 5000
#+end_src

** Web Pages
Background color for web pages if unset (or empty to use the theme's color).
#+begin_src python
c.colors.webpage.bg = ''
#+end_src

** Dark Mode
Which algorithm to use for modifying how colors are rendered with darkmode. The `lightness-cielab` value was added with QtWebEngine 5.14 and is treated like `lightness-hsl` with older QtWebEngine versions.
# Type: String
Valid values:
- lightness-cielab: Modify colors by converting them to CIELAB color space and inverting the L value. Not available with Qt < 5.14.
- lightness-hsl: Modify colors by converting them to the HSL color space and inverting the lightness (i.e. the "L" in HSL).
- brightness-rgb: Modify colors by subtracting each of r, g, and b from their maximum value.
#+begin_src python
c.colors.webpage.darkmode.algorithm = 'lightness-cielab'
#+end_src

Contrast for dark mode. This only has an effect when `colors.webpage.darkmode.algorithm` is set to `lightness-hsl` or `brightness-rgb`.
# Type: Float
#+begin_src python
# c.colors.webpage.darkmode.contrast = 0.0
#+end_src

Render all web contents using a dark theme. Example configurations from Chromium's `chrome://flags`:  - "With simple HSL/CIELAB/RGB-based inversion": Set   `colors.webpage.darkmode.algorithm` accordingly.  - "With selective image inversion": Set `colors.webpage.darkmode.policy.images` to `smart`.  - "With selective inversion of non-image elements": Set `colors.webpage.darkmode.threshold.text` to 150 and `colors.webpage.darkmode.threshold.background` to 205.  - "With selective inversion of everything": Combines the two variants   above.
# Type: Bool
#+begin_src python
c.colors.webpage.darkmode.enabled = False
#+end_src

Which images to apply dark mode to. With QtWebEngine 5.15.0, this setting can cause frequent renderer process crashes due to a https://codereview.qt-project.org/c/qt/qtwebengine- chromium/+/304211[bug in Qt].
# Type: String
Valid values:
- always: Apply dark mode filter to all images.
- never: Never apply dark mode filter to any images.
- smart: Apply dark mode based on image content. Not available with Qt 5.15.0.
#+begin_src python
c.colors.webpage.darkmode.policy.images = 'always'
#+end_src

Which pages to apply dark mode to. The underlying Chromium setting has
been removed in QtWebEngine 5.15.3, thus this setting is ignored
there. Instead, every element is now classified individually.
# Type: String
Valid values:
- always: Apply dark mode filter to all frames, regardless of content.
- smart: Apply dark mode filter to frames based on background color.
#+begin_src python
c.colors.webpage.darkmode.policy.page = 'smart'
#+end_src

Threshold for inverting background elements with dark mode. Background elements with brightness above this threshold will be inverted, and below it will be left as in the original, non-dark-mode page. Set to 256 to never invert the color or to 0 to always invert it. Note: This behavior is the opposite of `colors.webpage.darkmode.threshold.text`!
# Type: Int
#+begin_src python
c.colors.webpage.darkmode.threshold.background = 100
# c.colors.webpage.darkmode.threshold.background = 205
#+end_src

Threshold for inverting text with dark mode. Text colors with brightness below this threshold will be inverted, and above it will be left as in the original, non-dark-mode page. Set to 256 to always invert text color or to 0 to never invert text color.
# Type: Int
#+begin_src python
c.colors.webpage.darkmode.threshold.foreground = 150
#+end_src

Value to use for `prefers-color-scheme:` for websites. The "light" value is only available with QtWebEngine 5.15.2+. On older versions, it is the same as "auto". The "auto" value is broken on QtWebEngine 5.15.2 due to a Qt bug. There, it will fall back to "light" unconditionally.
# Type: String
Valid values:
- auto: Use the system-wide color scheme setting.
- light: Force a light theme.
- dark: Force a dark theme.
#+begin_src python
c.colors.webpage.preferred_color_scheme = "dark"
#+end_src

* Behavior
This is here so configs done via the GUI are still loaded. Remove it to not load settings done via the GUI.
#+begin_src python
config.load_autoconfig(True)
#+end_src

** Backend
Backend to use to display websites. qutebrowser supports two different web rendering engines / backends, =QtWebEngine= and =QtWebKit= (not recommended). =QtWebEngine= is =Qt's= official successor to =QtWebKit=, and both the default/recommended backend. It's based on a stripped-down Chromium and regularly updated with security fixes and new features by the Qt project: https://wiki.qt.io/QtWebEngine =QtWebKit= was =qutebrowser's= original backend when the project was started. However, support for =QtWebKit= was discontinued by the Qt project with Qt 5.6 in 2016. The development of =QtWebKit= was picked up in an official fork: https://github.com/qtwebkit/qtwebkit - however, the project seems to have stalled again. The latest release (5.212.0 Alpha 4) from March 2020 is based on a =WebKit= version from 2016, with many known security vulnerabilities. Additionally, there is no process isolation and sand-boxing. Due to all those issues, while support for =QtWebKit= is still available in qutebrowser for now, using it is strongly discouraged.
# Type: String
Valid values:
- =webengine=: Use =QtWebEngine= (based on Chromium - recommended).
- =webkit=: Use =QtWebKit= (based on =WebKit=, similar to Safari - many known security issues!).
#+begin_src python
c.backend = 'webengine'
#+end_src

** Changelog
When to show a changelog after qutebrowser was upgraded.
# Type: String
Valid values:
- major: Show changelog for major upgrades (e.g. v2.0.0 -> v3.0.0).
- minor: Show changelog for major and minor upgrades (e.g. v2.0.0 -> v2.1.0).
- patch: Show changelog for major, minor and patch upgrades (e.g. v2.0.0 -> v2.0.1).
- never: Never show changelog after upgrades.
#+begin_src python
c.changelog_after_upgrade = "major"
#+end_src

** TODO Autocompletion
#+begin_src python
# Delay (in milliseconds) before updating completions after typing a
# character.
# Type: Int
# c.completion.delay = 0

# Default filesystem autocomplete suggestions for :open. The elements of
# this list show up in the completion window under the Filesystem
# category when the command line contains `:open` but no argument.
# Type: List of String
# c.completion.favorite_paths = []

# Height (in pixels or as percentage of the window) of the completion.
# Type: PercOrInt
# c.completion.height = '50%'

# Minimum amount of characters needed to update completions.
# Type: Int
# c.completion.min_chars = 1

# Which categories to show (in which order) in the :open completion.
# Type: FlagList
# Valid values:
# - searchengines
# - quickmarks
# - bookmarks
# - history
# - filesystem
# c.completion.open_categories = ['searchengines', 'quickmarks', 'bookmarks', 'history', 'filesystem']

# Move on to the next part when there's only one possible completion
# left.
# Type: Bool
# c.completion.quick = True

# Padding (in pixels) of the scrollbar handle in the completion window.
# Type: Int
# c.completion.scrollbar.padding = 2

# Width (in pixels) of the scrollbar in the completion window.
# Type: Int
# c.completion.scrollbar.width = 12

# When to show the autocompletion window.
# Type: String
# Valid values:
# - always: Whenever a completion is available.
# - auto: Whenever a completion is requested.
# - never: Never.
# c.completion.show = 'always'

# Shrink the completion to be smaller than the configured size if there
# are no scrollbars.
# Type: Bool
# c.completion.shrink = False

# Format of timestamps (e.g. for the history completion). See
# https://sqlite.org/lang_datefunc.html and
# https://docs.python.org/3/library/datetime.html#strftime-strptime-
# behavior for allowed substitutions, qutebrowser uses both sqlite and
# Python to format its timestamps.
# Type: String
# c.completion.timestamp_format = '%Y-%m-%d %H:%M'

# Execute the best-matching command on a partial match.
# Type: Bool
# c.completion.use_best_match = False

# A list of patterns which should not be shown in the history. This only
# affects the completion. Matching URLs are still saved in the history
# (and visible on the `:history` page), but hidden in the completion.
# Changing this setting will cause the completion history to be
# regenerated on the next start, which will take a short while.
# Type: List of UrlPattern
# c.completion.web_history.exclude = []

# Number of URLs to show in the web history. 0: no history / -1:
# unlimited
# Type: Int
# c.completion.web_history.max_items = -1


#+end_src

** Full Screen
Set full-screen notification overlay timeout in milliseconds. If set to 0, no overlay will be displayed.
Type: =Int=
#+begin_src python
c.content.fullscreen.overlay_timeout = 3000
#+end_src

Limit full-screen to the browser window (does not expand to fill the screen).
Type: =Bool=
#+begin_src python
c.content.fullscreen.window = False
#+end_src

** Headers
Value to send in the `Accept-Language` header. Note that the value read from JavaScript is always the global value.
# Type: =String=
#+begin_src python
# c.content.headers.accept_language = 'en-US,en;q=0.9'
#+end_src

Custom headers for qutebrowser HTTP requests.
# Type: =Dict=
#+begin_src python
# c.content.headers.custom = {}
#+end_src

Value to send in the =DNT= header. When this is set to true, qutebrowser asks websites to not track your identity. If set to null, the DNT header is not sent at all.
# Type: =Bool=
#+begin_src python
c.content.headers.do_not_track = True
#+end_src

When to send the =Referer= header. The =Referer= header tells websites from which website you were coming from when visiting them. No restart is needed with =QtWebKit=.
# Type: =String=
Valid values:
- always: Always send the =Referer=.
- never: Never send the =Referer=. This is not recommended, as some sites may break.
- same-domain: Only send the =Referer= for the same domain. This will still protect your privacy, but shouldn't break any sites. With =QtWebEngine=, the =referer= will still be sent for other domains, but with stripped path information.
#+begin_src python
c.content.headers.referer = 'same-domain'
#+end_src

User agent to send.  The following placeholders are defined:  * ={os_info}=: Something like =X11; Linux x86_64=. * ={webkit_version}=: The underlying =WebKit= version (set to a fixed value   with =QtWebEngine=). * ={qt_key}=: =Qt= for =QtWebKit=, =QtWebEngine= for =QtWebEngine=. * ={qt_version}=: The underlying Qt version. * ={upstream_browser_key}=: =Version= for =QtWebKit=, =Chrome= for =QtWebEngine=. * ={upstream_browser_version}=: The corresponding Safari/Chrome version. * ={qutebrowser_version}=: The currently running qutebrowser version.  The default value is equal to the unchanged user agent of =QtWebKit/QtWebEngine=. Note that the value read from JavaScript is always the global value. With =QtWebEngine= between 5.12 and 5.14 (inclusive), changing the value exposed to JavaScript requires a restart.
Type: =FormatString=
#+begin_src python
c.content.headers.user_agent = 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {qt_key}/{qt_version} {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}'
#+end_src

** Scrolling
When/how to show the scroll-bar.
Type: String
Valid values:
- always: Always show the scroll-bar.
- never: Never show the scroll-bar.
- when-searching: Show the scroll-bar when searching for text in the web page. With the =QtWebKit= backend, this is equal to =never=.
- overlay: Show an overlay scroll-bar. On =macOS=, this is unavailable and equal to =when-searching=; with the =QtWebKit= backend, this is equal to =never=. Enabling/disabling overlay scroll-bars requires a restart.
#+begin_src python
c.scrolling.bar = 'overlay'
#+end_src

Enable smooth scrolling for web pages. Note smooth scrolling does not work with the =:scroll-px= command.
Type: =Bool=
#+begin_src python
c.scrolling.smooth = True
#+end_src

** Zooming
#+begin_src python
# Default zoom level.
# Type: Perc
c.zoom.default = '125%'

# Available zoom levels.
# Type: List of Perc
c.zoom.levels = ['25%', '33%', '50%', '67%', '75%', '90%', '100%', '110%', '125%', '150%', '175%', '200%', '250%', '300%', '400%', '500%']

# Number of zoom increments to divide the mouse wheel movements to.
# Type: Int
c.zoom.mouse_divider = 512

# Apply the zoom factor on a frame only to the text or to all content.
# Not available with the QtWebEngine backend
# Type: Bool
# c.zoom.text_only = False
#+end_src

** TODO Other
#+begin_src python
# Require a confirmation before quitting the application.
# Type: ConfirmQuit
# Valid values:
# - always: Always show a confirmation.
# - multiple-tabs: Show a confirmation if multiple tabs are opened.
# - downloads: Show a confirmation if downloads are running
# - never: Never show a confirmation.
c.confirm_quit = ['downloads']

# Automatically start playing `<video>` elements.
# Type: Bool
c.content.autoplay = False

# Default encoding to use for websites. The encoding must be a string
# describing an encoding such as _utf-8_, _iso-8859-1_, etc.
# Type: String
# c.content.default_encoding = 'iso-8859-1'

# Try to pre-fetch DNS entries to speed up browsing.
# Type: Bool
c.content.dns_prefetch = True

# Expand each subframe to its contents. This will flatten all the frames
# to become one scrollable page.
# Type: Bool
# c.content.frame_flattening = False

# Enable hyperlink auditing (`<a ping>`).
# Type: Bool
c.content.hyperlink_auditing = False

# Load images automatically in web pages.
# Type: Bool
c.content.images = True

# Allow locally loaded documents to access other local URLs.
# Type: Bool
# c.content.local_content_can_access_file_urls = True

# Allow locally loaded documents to access remote URLs.
# Type: Bool
# c.content.local_content_can_access_remote_urls = False

# Automatically mute tabs. Note that if the `:tab-mute` command is used,
# the mute status for the affected tab is now controlled manually, and
# this setting doesn't have any effect.
# Type: Bool
# c.content.mute = False

# Netrc-file for HTTP authentication. If unset, `~/.netrc` is used.
# Type: File
# c.content.netrc_file = None

#+end_src

** New Instance
How to open links in an existing instance if a new one is launched. This happens when e.g. opening a link from a terminal. See `new_instance_open_target_window` to customize in which window the link is opened in.
# Type: String
Valid values:
- tab: Open a new tab in the existing window and activate the window.
- tab-bg: Open a new background tab in the existing window and activate the window.
- tab-silent: Open a new tab in the existing window without activating the window.
- tab-bg-silent: Open a new background tab in the existing window without activating the window.
- window: Open in a new window.
- private-window: Open in a new private window.
#+begin_src python
c.new_instance_open_target = 'tab'
#+end_src

Which window to choose when opening links as new tabs. When
`new_instance_open_target` is set to `window`, this is ignored.
# Type: String
Valid values:
- first-opened: Open new tabs in the first (oldest) opened window.
- last-opened: Open new tabs in the last (newest) opened window.
- last-focused: Open new tabs in the most recently focused window.
- last-visible: Open new tabs in the most recently visible window.
#+begin_src python
c.new_instance_open_target_window = 'last-focused'
#+end_src

* Search Engines
What search to start when something else than a URL is entered.
# Type: String
Valid values:
- naive: Use simple/naive check.
- dns: Use DNS requests (might be slow!).
- never: Never search automatically.
- schemeless: Always search automatically unless URL explicitly contains a scheme.
#+begin_src python
c.url.auto_search = 'naive'
#+end_src

URL segments where `:navigate increment/decrement` will search for a
number.
# Type: FlagList
Valid values:
- host
- port
- path
- query
- anchor
#+begin_src python
# c.url.incdec_segments = ['path', 'query']
#+end_src

Open base URL of the searchengine if a searchengine shortcut is
invoked without parameters.
# Type: Bool
#+begin_src python
c.url.open_base_url = True
#+end_src

Page(s) to open at the start.
# Type: List of FuzzyUrl, or FuzzyUrl
#+begin_src python
c.url.start_pages = ["https://search.brave.com"]
#+end_src

Page to open if :open -t/-b/-w is used without URL. Use `about:blank`
for a blank page.
# Type: FuzzyUrl
#+begin_src python
c.url.default_page = 'https://search.brave.com'
#+end_src

URL parameters to strip with `:yank url`.
# Type: List of String
#+begin_src python
# c.url.yank_ignored_parameters = ['ref', 'utm_source', 'utm_medium', 'utm_campaign', 'utm_term', 'utm_content']
#+end_src

Search engines which can be used via the address bar. Maps a search engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}` placeholder. The placeholder will be replaced by the search term, use `{{` and `}}` for literal `{`/`}` braces.
# Type: Dict
The following further placeholds are defined to configure how special characters in the search terms are replaced by safe characters (called 'quoting'):
- `{}` and `{semiquoted}` quote everything except slashes; this is the most sensible choice for almost all search engines (for the search term `slash/and&amp` this placeholder expands to `slash/and%26amp`).
- `{quoted}` quotes all characters (for `slash/and&amp` this placeholder expands to `slash%2Fand%26amp`).
- `{unquoted}` quotes nothing (for `slash/and&amp` this placeholder expands to `slash/and&amp`).
- `{0}` means the same as `{}`, but can be used multiple times. The search engine named `DEFAULT` is used when `url.auto_search` is turned on and something else than a URL was entered to be opened. Other search engines can be used by prepending the search engine name to the search term, e.g. `:open google qutebrowser`.
#+begin_src python
c.url.searchengines = {
    "DEFAULT"           : "https://search.brave.com/search?q={}",
    "aw"                : "https://wiki.archlinux.org/index.php?search={}",
    "aur"               : "https://aur.archlinux.org/packages?O=0&K={}",
    "r"                 : "https://www.reddit.com/search/?q={}",
    "gt"                : "https://translate.google.co.uk/?sl=auto&tl=en&text={}",
    "gtj"               : "https://translate.google.co.uk/?sl=auto&tl=ja&text={}",
    "gtr"               : "https://translate.google.co.uk/?sl=auto&tl=ru&text={}",
    "gd"                : "https://drive.google.com/drive/search?q={}",
    "gm"                : "https://www.google.com/maps/search/{}?hl=en&source=opensearch",
    "g"                 : "https://www.google.com/search?q={}",
    "ip"                : "https://ipleak.net/{}",
    "youtube"           : "https://www.youtube.com/results?search_query={}",
    "yth"               : "https://www.youtube.com/feed/history?query={}",
    "ytm"               : "https://music.youtube.com/search?q={}",
    "github"            : "https://github.com/search?q={}&ref=opensearch",
    "bandcamp"          : "https://bandcamp.com/search?q={}",
    "musicbrainsttitle" : "https://musicbrainz.org/search?method=indexed&type=recording&query={}",
    "musicbrainsartist" : "https://musicbrainz.org/search?method=indexed&type=artist&query={}",
    "musicbrainsalbum"  : "https://musicbrainz.org/search?method=indexed&type=release&query={}",
    "crunchyroll"       : "https://www.crunchyroll.com/search?q={}",
    "odysee"            : "https://odysee.com/$/search?q={}",
    "musixmatch"        : "https://www.musixmatch.com/search/{}",
    "fontawesome"       : "https://fontawesome.com/search?q={}&o=r",
    "protondb"          : "https://www.protondb.com/search?q={}",
    "newegg"            : "https://www.newegg.ca/p/pl?d={}",
    "amazonuk"          : "https://www.amazon.co.uk/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords={}",
    "amazoncom"         : "https://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords={}",
    "amazonca"          : "https://www.amazon.ca/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords={}",
    "acoustid"          : "https://acoustid.org/track/{}",
    "gog"               : "https://www.gog.com/en/games?query={}",
    "wall"              : "https://wallpapersden.com/search?q={}",
}
#+end_src

* Aliases
Aliases for commands. The keys of the given dictionary are the
aliases, while the values are the commands they map to.
# Type: Dict
#+begin_src python
# c.aliases = {'w': 'session-save', 'q': 'close', 'qa': 'quit', 'wq': 'quit --save', 'wqa': 'quit --save'}
#+end_src

* Sessions
** Auto Save
Name of the session to save by default. If this is set to null, the session which was last loaded is saved.
Type: SessionName
#+begin_src python
c.session.default_name = "autosave"
#+end_src

Always restore open sites when qutebrowser is reopened. Without this
option set, `:wq` (`:quit --save`) needs to be used to save open tabs
(and restore them), while quitting qutebrowser in any other way will
not save/restore the session. By default, this will save to the
session which was last loaded. This behavior can be customized via the
`session.default_name` setting.
# Type: Bool
#+begin_src python
c.auto_save.session = True
#+end_src

Time interval (in milliseconds) between auto-saves of
config/cookies/etc.
# Type: Int
#+begin_src python
c.auto_save.interval = 15000
#+end_src

** History
Number of commands to save in the command history. 0: no history / -1: unlimited
# Type: Int
#+begin_src python
# c.completion.cmd_history_max_items = 100
#+end_src

* Tabs
** Visuals
*** General
Min and Max width (in pixels) of tabs (-1 for the default size behavior). This
setting only applies when tabs are horizontal. This setting does not apply to
pinned tabs, unless =tabs.pinned.shrink= is False.
Max width setting may not apply properly if =max_width= is smaller than the
minimum size of tab contents, or smaller than =tabs.min_width=.
Type: =Int=
#+begin_src python
c.tabs.min_width = -1
c.tabs.max_width = 200
#+end_src

*** Tab Bar
Position of the tab bar.
Type: =Position=
Valid values:
- top
- bottom
- left
- right
#+begin_src python
c.tabs.position = 'bottom'
#+end_src

When to show the tab bar.
Type: =String=
Valid values:
- always: Always show the tab bar.
- never: Always hide the tab bar.
- multiple: Hide the tab bar if only one tab is open.
- switching: Show the tab bar when switching tabs.
#+begin_src python
c.tabs.show = 'multiple'
#+end_src

Duration (in milliseconds) to show the tab bar before hiding it when
tabs.show is set to 'switching'.
Type: =Int=
#+begin_src python
# c.tabs.show_switching_delay = 800
#+end_src

Width (in pixels or as percentage of the window) of the tab bar if
it's vertical.
Type: =PercOrInt=
#+begin_src python
# c.tabs.width = '15%'
#+end_src

*** Titles
Padding (in pixels) around text for tabs.
Type: =Padding=
#+begin_src python
c.tabs.padding = {'top': 3, 'bottom': 3, 'left': 0, 'right': 5}
#+end_src

Alignment of the text inside of tabs.
Type: =TextAlignment=
Valid values:
- left
- right
- center
#+begin_src python
c.tabs.title.alignment = 'left'
#+end_src

Format to use for the tab title.
Type: =FormatString=
The following placeholders are defined:
| ={perc}=          | Percentage as a string like =[0%]=                             |
| ={perc_raw}=      | Raw percentage, e.g. =10=                                      |
| ={current_title}= | Title of the current web page                                |
| ={title_sep}=     | The string =" - "= if a title is set, empty otherwise          |
| ={index}=         | Index of this tab                                            |
| ={aligned_index}= | Index of this tab padded with spaces to have the same width. |
| ={id}=            | Internal tab ID of this tab                                  |
| ={scroll_pos}=    | Page scroll position                                         |
| ={host}=          | Host of the current web page                                 |
| ={backend}=       | Either =webkit= or =webengine=                                   |
| ={private}=       | Indicates when private mode is enabled                       |
| ={current_url}=   | URL of the current web page                                  |
| ={protocol}=      | Protocol (http/https/...) of the current web page            |
| ={audio}=         | Indicator for audio/mute status                              |
#+begin_src python
c.tabs.title.format = ' {perc}{audio}{private}{current_title}'
#+end_src

*** Favicons
Scaling factor for favicons in the tab bar. The tab size is unchanged,
so big favicons also require extra `tabs.padding`.
Type: =Float=
#+begin_src python
# c.tabs.favicons.scale = 1.0
#+end_src

When to show favicons in the tab bar. When switching this from never
to always/pinned, note that favicons might not be loaded yet, thus
tabs might require a reload to display them.
Type: =String=
Valid values:
- always: Always show favicons.
- never: Always hide favicons.
- pinned: Show favicons only on pinned tabs.
#+begin_src python
c.tabs.favicons.show = 'always'
#+end_src

*** Indicators
Padding (in pixels) for tab indicators.
Type: =Padding=
#+begin_src python
c.tabs.indicator.padding = {'top': 0, 'bottom': 0, 'left': 0, 'right': 8}
#+end_src

Width (in pixels) of the progress indicator (0 to disable).
Type: =Int=
#+begin_src python
c.tabs.indicator.width = 3
#+end_src

*** Pinned Tabs
Format to use for the tab title for pinned tabs. The same placeholders
like for `tabs.title.format` are defined.
Type: =FormatString=
#+begin_src python
c.tabs.title.format_pinned = '{perc}{audio}{private}'
#+end_src

** Behavior
*** General
Show tooltips on tabs. Note this setting only affects windows opened
after it has been set.
Type: =Bool=
#+begin_src python
c.tabs.tooltips = True
#+end_src

*** Opening
Position of new tabs opened from another tab. See
=tabs.new_position.stacking= for controlling stacking behavior.
Type: =NewTabPosition=
Valid values:
- prev: Before the current tab.
- next: After the current tab.
- first: At the beginning.
- last: At the end.
#+begin_src python
c.tabs.new_position.related = 'next'
#+end_src

Position of new tabs which are not opened from another tab. See
=tabs.new_position.stacking= for controlling stacking behavior.
Type: =NewTabPosition=
Valid values:
- prev: Before the current tab.
- next: After the current tab.
- first: At the beginning.
- last: At the end.
#+begin_src python
c.tabs.new_position.unrelated = 'last'
#+end_src

Open a new window for every tab.
Type: =Bool=
#+begin_src python
c.tabs.tabs_are_windows = False
#+end_src

*** Switching
When switching tabs, what input mode is applied.
Type: =String=
Valid values:
- persist: Retain the current mode.
- restore: Restore previously saved mode.
- normal: Always revert to normal mode.
#+begin_src python
c.tabs.mode_on_change = 'normal'
#+end_src

Wrap when changing tabs.
Type: =Bool=
#+begin_src python
c.tabs.wrap = True
#+end_src

*** Closing
Which tab to select when the focused tab is removed.
Type: =SelectOnRemove=
Valid values:
- prev: Select the tab which came before the closed one (left in horizontal, above in vertical).
- next: Select the tab which came after the closed one (right in horizontal, below in vertical).
- last-used: Select the previously selected tab.
#+begin_src python
c.tabs.select_on_remove = 'last-used'
#+end_src

How to behave when the last tab is closed. If the
`tabs.tabs_are_windows` setting is set, this is ignored and the
behavior is always identical to the `close` value.
Type: =String=
Valid values:
- ignore: Don't do anything.
- blank: Load a blank page.
- startpage: Load the start page.
- default-page: Load the default page.
- close: Close the window.
#+begin_src python
c.tabs.last_close = 'startpage'
#+end_src

Number of closed tabs (per window) and closed windows to remember for
:undo (-1 for no maximum).
Type: =Int=
#+begin_src python
c.tabs.undo_stack_size = -1
#+end_src

*** Restoring
Load a restored tab as soon as it takes focus.
Type: Bool
#+begin_src python
c.session.lazy_restore = True
#+end_src

*** Pinned Tabs
Force pinned tabs to stay at fixed URL.
Type: =Bool=
#+begin_src python
c.tabs.pinned.frozen = True
#+end_src

Shrink pinned tabs down to their contents.
Type: =Bool=
#+begin_src python
c.tabs.pinned.shrink = True
#+end_src

*** Stacks
Stack related tabs on top of each other when opened consecutively.
Only applies for `next` and `prev` values of
`tabs.new_position.related` and `tabs.new_position.unrelated`.
Type: =Bool=
#+begin_src python
# c.tabs.new_position.stacking = True
#+end_src

Maximum stack size to remember for tab switches (-1 for no maximum).
Type: =Int=
#+begin_src python
# c.tabs.focus_stack_size = 10
#+end_src

* Status Bar
Valid values for statusbar position:
- top
- bottom

Valid values for showing the statusbar:
- always: Always show the statusbar.
- never: Always hide the statusbar.
- in-mode: Show the statusbar when in modes other than normal mode.

Valid values for widgets:
- =url=: Current page URL.
- =scroll=: Percentage of the current page position like `10%`.
- =scroll_raw=: Raw percentage of the current page position like `10`.
- =history=: Display an arrow when possible to go back/forward in history.
- =tabs=: Current active tab, e.g. `2`.
- =keypress=: Display pressed keys when composing a vi command.
- =progress=: Progress bar for the current page loading.
- =text:foo=: Display the static text after the colon, `foo` in the example.

#+begin_src python
c.statusbar.padding = {'top': 4, 'bottom': 4, 'left': 5, 'right': 5}
c.statusbar.position = 'bottom'
c.statusbar.show = 'always'
c.statusbar.widgets = ['keypress', 'progress', 'history', 'text: -- ', 'url', 'text: -- ', 'scroll']
#+end_src

* Downloads
#+begin_src python
# Directory to save downloads to. If unset, a sensible OS-specific default is used.
# Type: Directory
c.downloads.location.directory = None

# Prompt the user for the download location. If set to false,
# `downloads.location.directory` will be used.
# Type: Bool
c.downloads.location.prompt = True

# Remember the last used download directory.
# Type: Bool
c.downloads.location.remember = True

# What to display in the download filename input.
# Type: String
# Valid values:
# - path: Show only the download path.
# - filename: Show only download filename.
# - both: Show download path and filename.
c.downloads.location.suggestion = 'path'

# Default program used to open downloads. If null, the default internal
# handler is used. Any `{}` in the string will be expanded to the
# filename, else the filename will be appended.
# Type: String
c.downloads.open_dispatcher = None

# Where to show the downloaded files.
# Type: VerticalPosition
# Valid values:
# - top
# - bottom
c.downloads.position = 'bottom'

# Duration (in milliseconds) to wait before removing finished downloads.
# If set to -1, downloads are never removed.
# Type: Int
c.downloads.remove_finished = 60000
#+end_src

Show a file browser in download prompts.
Type: =Bool=

Rounding radius (in pixels) for the edges of prompts.
Type: =Int=

#+begin_src python
c.prompt.filebrowser = True
c.prompt.radius = theme.radius
#+end_src

* TODO Key Bindings
** Unbind
*** QuteBrowser
Termination
#+begin_src python
config.unbind('<Ctrl-Q>') # quit ?
config.unbind('ZQ')       # quit
config.unbind('ZZ')       # quit --save
#+end_src

Config-cycle commands
#+begin_src python
config.unbind('tCH') # config-cycle -p -u *://*.{url:host}/* content.cookies.accept all no-3rdparty never ;; reload
config.unbind('tCh') # config-cycle -p -u *://{url:host}/* content.cookies.accept all no-3rdparty never ;; reload
config.unbind('tCu') # config-cycle -p -u {url} content.cookies.accept all no-3rdparty never ;; reload
config.unbind('tIH') # config-cycle -p -u *://*.{url:host}/* content.images ;; reload
config.unbind('tIh') # config-cycle -p -u *://{url:host}/* content.images ;; reload
config.unbind('tIu') # config-cycle -p -u {url} content.images ;; reload
config.unbind('tPH') # config-cycle -p -u *://*.{url:host}/* content.plugins ;; reload
config.unbind('tPh') # config-cycle -p -u *://{url:host}/* content.plugins ;; reload
config.unbind('tPu') # config-cycle -p -u {url} content.plugins ;; reload
config.unbind('tSH') # config-cycle -p -u *://*.{url:host}/* content.javascript.enabled ;; reload
config.unbind('tSh') # config-cycle -p -u *://{url:host}/* content.javascript.enabled ;; reload
config.unbind('tSu') # config-cycle -p -u {url} content.javascript.enabled ;; reload
config.unbind('tcH') # config-cycle -p -t -u *://*.{url:host}/* content.cookies.accept all no-3rdparty never ;; reload
config.unbind('tch') # config-cycle -p -t -u *://{url:host}/* content.cookies.accept all no-3rdparty never ;; reload
config.unbind('tcu') # config-cycle -p -t -u {url} content.cookies.accept all no-3rdparty never ;; reload
config.unbind('tiH') # config-cycle -p -t -u *://*.{url:host}/* content.images ;; reload
config.unbind('tih') # config-cycle -p -t -u *://{url:host}/* content.images ;; reload
config.unbind('tiu') # config-cycle -p -t -u {url} content.images ;; reload
config.unbind('tpH') # config-cycle -p -t -u *://*.{url:host}/* content.plugins ;; reload
config.unbind('tph') # config-cycle -p -t -u *://{url:host}/* content.plugins ;; reload
config.unbind('tpu') # config-cycle -p -t -u {url} content.plugins ;; reload
config.unbind('tsH') # config-cycle -p -t -u *://*.{url:host}/* content.javascript.enabled ;; reload
config.unbind('tsh') # config-cycle -p -t -u *://{url:host}/* content.javascript.enabled ;; reload
config.unbind('tsu') # config-cycle -p -t -u {url} content.javascript.enabled ;; reload
#+end_src

*** Interactions
Zooming pages
#+begin_src python
config.unbind('-') # zoom-out
config.unbind('+') # zoom-in
config.unbind('=') # zoom
#+end_src

*** Windows
#+begin_src python
# config.unbind('wo') # cmd-set-text -s :open -w
# config.unbind('wO') # cmd-set-text :open -w {url:pretty}

config.unbind('wh') # back -w
config.unbind('wl') # forward -w

# config.unbind('wp') # open -w -- {clipboard}
# config.unbind('wP') # open -w -- {primary}
#+end_src

*** Tabs
New tab
#+begin_src python
config.unbind('ga') # open -t
#+end_src

Close tab
#+begin_src python
config.unbind('d') # tab-close
config.unbind('D') # undo
#+end_src

Tab menu
#+begin_src python
config.unbind('T') # tab-focus
config.unbind('th') # back -t
config.unbind('tl') # forward -t
#+end_src

Silently open in another tab
#+begin_src python
config.unbind('xo') # cmd-set-text -s :open -b
config.unbind('xO') # cmd-set-text :open -b -r {url:pretty}
#+end_src

Open from clipboard
#+begin_src python
config.unbind('Pp') # open -t -- {clipboard}
config.unbind('PP') # open -t -- {primary}
#+end_src

#+begin_src python
config.unbind('gm') # tab-move
config.unbind('g$') # tab-focus -1
config.unbind('g0') # tab-focus 1
config.unbind('g^') # tab-focus 1
config.unbind('gC') # tab-clone
config.unbind('gD') # tab-give
config.unbind('gJ') # tab-move +
config.unbind('gK') # tab-move -
config.unbind('co') # tab-only
config.unbind('<Ctrl-p>') # Pin Tab
#+end_src

*** Downloads
#+begin_src python
config.unbind('ad') # download-cancel
config.unbind('gd') # download
#+end_src

*** History
#+begin_src python
config.unbind('Sh') # history
#+end_src

*** Bookmarks / Quick-marks
#+begin_src python
config.unbind('b')  # quickmark-load
config.unbind('B')  # quickmark-load -t
config.unbind('M')  # bookmark-add
config.unbind('Sq') # bookmark-list
config.unbind('Sb') # bookmark-list --jump
#+end_src

*** Hints
#+begin_src python
config.unbind(';r') # hint --rapid links tab-bg
config.unbind(';R') # hint --rapid links window
config.unbind(';d') # hint links download
config.unbind(';I') # hint images tab
config.unbind(';t') # hint inputs
config.unbind(';y') # hint links yank
config.unbind(';Y') # hint links yank-primary
config.unbind('gi') # hint inputs --first
#+end_src

*** Development Tools
#+begin_src python
config.unbind('gf')  # view-source
config.unbind('wi')  # devtools
config.unbind('wIf') # devtools-focus
config.unbind('wIh') # devtools left
config.unbind('wIj') # devtools bottom
config.unbind('wIk') # devtools top
config.unbind('wIl') # devtools right
config.unbind('wIw') # devtools window
#+end_src

** Modes
*** General
#+begin_src python
config.bind('<Ctrl-Shift-N>', 'open --window')
config.bind('<Ctrl-Shift-I>', 'open --private')
config.bind('v', 'mode-enter caret')
config.bind('V', 'mode-enter caret ;; selection-toggle --line')

config.bind('i', 'mode-enter insert')
config.bind('I', 'mode-enter insert ;; fake-key <Home>')
config.bind('a', 'mode-enter insert ;; fake-key <Right>')
config.bind('A', 'mode-enter insert ;; fake-key <End>')
config.bind('<Ctrl-A>', 'mode-enter insert ;; fake-key <Ctrl-A>')

config.bind('<Ctrl-V>', 'mode-enter passthrough')
config.bind("'", 'mode-enter jump_mark')
config.bind('m', 'mode-enter set_mark')
config.bind('c', 'mode-enter normal', mode='caret')
config.bind('<Escape>', 'mode-leave', mode='caret')
config.bind('<Escape>', 'mode-leave', mode='insert')
config.bind('<Escape>', 'mode-leave', mode='command')
config.bind('<Escape>', 'mode-leave', mode='hint')
config.bind('<Escape>', 'mode-leave', mode='prompt')
config.bind('<Escape>', 'mode-leave', mode='register')
config.bind('<Escape>', 'mode-leave', mode='yesno')
config.bind('<Shift-Escape>', 'mode-leave', mode='passthrough')
#+end_src

*** Command Mode
Edit in external editor
#+begin_src python
config.bind('<Ctrl-E>'      , 'cmd-edit'               , mode='command')
config.bind('<Return>'      , 'command-accept'         , mode='command')
config.bind('<Ctrl-Return>' , 'command-accept --rapid' , mode='command')
#+end_src

Completion
#+begin_src python
config.bind('<Ctrl-k>'       , 'completion-item-focus prev'         , mode='command')
config.bind('<Ctrl-j>'       , 'completion-item-focus next'         , mode='command')
config.bind('<Ctrl-Shift-k>' , 'completion-item-focus prev-page'    , mode='command')
config.bind('<Ctrl-Shift-j>' , 'completion-item-focus next-page'    , mode='command')
config.bind('<Ctrl-Shift-h>' , 'completion-item-focus prev-category', mode='command')
config.bind('<Ctrl-Shift-l>' , 'completion-item-focus next-category', mode='command')

config.bind('<Ctrl-C>'       , 'completion-item-yank'               , mode='command')
config.bind('<Ctrl-D>'       , 'completion-item-del'                , mode='command')
#+end_src

Deletion
#+begin_src python
config.bind('<Alt-Backspace>' , 'rl-backward-kill-word' , mode='command')
config.bind('<Ctrl-W>'        , 'rl-backward-kill-word' , mode='command')
config.bind('<Ctrl-Shift-W>'  , 'rl-unix-word-rubout'   , mode='command')
# config.bind('<Alt-D>'       , 'rl-kill-word'          , mode='command')
# config.bind('<Ctrl-?>'      , 'rl-delete-char'        , mode='command')
#+end_src

Text Navigation
#+begin_src python
config.bind('<Ctrl-0>'       , 'rl-beginning-of-line' , mode='command')
config.bind('<Ctrl-Shift-$>' , 'rl-end-of-line'       , mode='command')
# config.bind('<Ctrl-A>'     , 'rl-beginning-of-line' , mode='command')

config.bind('<Ctrl-H>'       , 'rl-backward-word'     , mode='command')
config.bind('<Ctrl-L>'       , 'rl-forward-word'      , mode='command')
# config.bind('<Alt-B>'      , 'rl-backward-word'     , mode='command')
# config.bind('<Alt-F>'      , 'rl-forward-word'      , mode='command')

config.bind('<Ctrl-B>'       , 'rl-backward-char'     , mode='command')
config.bind('<Ctrl-F>'       , 'rl-forward-char'      , mode='command')
#+end_src

Other
#+begin_src python
# config.bind('<Ctrl-K>'        , 'rl-kill-line'                        , mode='command')
# config.bind('<Ctrl-N>'        , 'command-history-next'                , mode='command')
# config.bind('<Ctrl-P>'        , 'command-history-prev'                , mode='command')
# config.bind('<Ctrl-Shift-C>'  , 'completion-item-yank --sel'          , mode='command')
# config.bind('<Ctrl-Shift-Tab>', 'completion-item-focus prev-category' , mode='command')
# config.bind('<Ctrl-Tab>'      , 'completion-item-focus next-category' , mode='command')
# config.bind('<Ctrl-U>'        , 'rl-unix-line-discard'                , mode='command')
# config.bind('<Ctrl-Y>'        , 'rl-yank'                             , mode='command')
# config.bind('<Down>'          , 'completion-item-focus --history next', mode='command')
# config.bind('<PgDown>'        , 'completion-item-focus next-page'     , mode='command')
# config.bind('<PgUp>'          , 'completion-item-focus prev-page'     , mode='command')
# config.bind('<Shift-Delete>'  , 'completion-item-del'                 , mode='command')
# config.bind('<Shift-Tab>'     , 'completion-item-focus prev'          , mode='command')
# config.bind('<Tab>'           , 'completion-item-focus next'          , mode='command')
# config.bind('<Up>'            , 'completion-item-focus --history prev', mode='command')
#+end_src

*** Prompt Mode
Downloads Prompt
#+begin_src python
config.bind('<Tab>', 'prompt-item-focus next', mode='prompt')
config.bind('<Shift-Tab>', 'prompt-item-focus prev', mode='prompt')

config.bind('<Ctrl-k>', 'prompt-item-focus prev', mode='prompt')
config.bind('<Ctrl-j>', 'prompt-item-focus next', mode='prompt')
config.bind('<Up>', 'prompt-item-focus prev', mode='prompt')
config.bind('<Down>', 'prompt-item-focus next', mode='prompt')

config.bind('<Return>', 'prompt-accept', mode='prompt')

config.bind('<Ctrl-W>', 'rl-backward-kill-word', mode='prompt')
config.bind('<Ctrl-Backspace>', 'rl-backward-kill-word', mode='prompt')
config.bind('<Alt-Backspace>', 'rl-backward-kill-word', mode='prompt')
#+end_src

#+begin_src python
# config.bind('<Alt-B>', 'rl-backward-word', mode='prompt')
# config.bind('<Alt-D>', 'rl-kill-word', mode='prompt')
# config.bind('<Alt-F>', 'rl-forward-word', mode='prompt')
# config.bind('<Alt-Shift-Y>', 'prompt-yank --sel', mode='prompt')
# config.bind('<Alt-Y>', 'prompt-yank', mode='prompt')
# config.bind('<Ctrl-?>', 'rl-delete-char', mode='prompt')
# config.bind('<Ctrl-A>', 'rl-beginning-of-line', mode='prompt')
# config.bind('<Ctrl-B>', 'rl-backward-char', mode='prompt')
# config.bind('<Ctrl-E>', 'rl-end-of-line', mode='prompt')
# config.bind('<Ctrl-F>', 'rl-forward-char', mode='prompt')
# config.bind('<Ctrl-H>', 'rl-backward-delete-char', mode='prompt')
# config.bind('<Ctrl-K>', 'rl-kill-line', mode='prompt')
# config.bind('<Ctrl-U>', 'rl-unix-line-discard', mode='prompt')
# config.bind('<Ctrl-W>', 'rl-unix-word-rubout', mode='prompt')
# config.bind('<Ctrl-Y>', 'rl-yank', mode='prompt')
#+end_src

*** Yes-No Mode
#+begin_src python
config.bind('<Alt-Shift-Y>', 'prompt-yank --sel'       , mode='yesno')
config.bind('<Alt-Y>'      , 'prompt-yank'             , mode='yesno')
config.bind('<Return>'     , 'prompt-accept'           , mode='yesno')
config.bind('N'            , 'prompt-accept --save no' , mode='yesno')
config.bind('Y'            , 'prompt-accept --save yes', mode='yesno')
config.bind('n'            , 'prompt-accept no'        , mode='yesno')
config.bind('y'            , 'prompt-accept yes'       , mode='yesno')
#+end_src

*** Caret Mode
#+begin_src python
# config.bind('$', 'move-to-end-of-line', mode='caret')
# config.bind('0', 'move-to-start-of-line', mode='caret')
# config.bind('<Ctrl-Space>', 'selection-drop', mode='caret')
# config.bind('<Return>', 'yank selection', mode='caret')
# config.bind('<Space>', 'selection-toggle', mode='caret')
# config.bind('G', 'move-to-end-of-document', mode='caret')
# config.bind('H', 'scroll left', mode='caret')
# config.bind('J', 'scroll down', mode='caret')
# config.bind('K', 'scroll up', mode='caret')
# config.bind('L', 'scroll right', mode='caret')
# config.bind('V', 'selection-toggle --line', mode='caret')
# config.bind('Y', 'yank selection -s', mode='caret')
# config.bind('[', 'move-to-start-of-prev-block', mode='caret')
# config.bind(']', 'move-to-start-of-next-block', mode='caret')
# config.bind('b', 'move-to-prev-word', mode='caret')
# config.bind('e', 'move-to-end-of-word', mode='caret')
# config.bind('gg', 'move-to-start-of-document', mode='caret')
# config.bind('h', 'move-to-prev-char', mode='caret')
# config.bind('j', 'move-to-next-line', mode='caret')
# config.bind('k', 'move-to-prev-line', mode='caret')
# config.bind('l', 'move-to-next-char', mode='caret')
# config.bind('o', 'selection-reverse', mode='caret')
# config.bind('v', 'selection-toggle', mode='caret')
# config.bind('w', 'move-to-next-word', mode='caret')
# config.bind('y', 'yank selection', mode='caret')
# config.bind('{', 'move-to-end-of-prev-block', mode='caret')
# config.bind('}', 'move-to-end-of-next-block', mode='caret')
#+end_src

*** Insert Mode
Edit in external editor
#+begin_src python
config.bind('<Ctrl-E>'       , 'edit-text'                   , mode='insert')
#+end_src

Vim-like text navigation
#+begin_src python
config.bind('<Mod1-H>'       , 'fake-key <Left>'             , mode='insert')
config.bind('<Mod1-J>'       , 'fake-key <Down>'             , mode='insert')
config.bind('<Mod1-K>'       , 'fake-key <Up>'               , mode='insert')
config.bind('<Mod1-L>'       , 'fake-key <Right>'            , mode='insert')
config.bind('<Mod1-Shift-H>' , 'fake-key <Shift-Left>'       , mode='insert')
config.bind('<Mod1-Shift-L>' , 'fake-key <Shift-Right>'      , mode='insert')
config.bind('<Ctrl-H>'       , 'fake-key <Ctrl-Left>'        , mode='insert')
config.bind('<Ctrl-J>'       , 'fake-key <End>'              , mode='insert')
config.bind('<Ctrl-K>'       , 'fake-key <Home>'             , mode='insert')
config.bind('<Ctrl-L>'       , 'fake-key <Ctrl-Right>'       , mode='insert')
config.bind('<Ctrl-Shift-H>' , 'fake-key <Ctrl-Shift-Left>'  , mode='insert')
config.bind('<Ctrl-Shift-L>' , 'fake-key <Ctrl-Shift-Right>' , mode='insert')
config.bind('<Ctrl-W>'       , 'fake-key <Ctrl-Backspace>'   , mode='insert')
#+end_src

Paste text
#+begin_src python
config.bind('<Ctrl-Shift-V>', 'insert-text -- {primary}', mode='insert')
config.bind('<Shift-Ins>'   , 'insert-text -- {primary}', mode='insert')
#+end_src

*** Hint Mode
#+begin_src python
config.bind('<Ctrl-B>', 'hint all tab-bg'          , mode='hint')
config.bind('<Ctrl-F>', 'hint links'               , mode='hint')
config.bind('<Ctrl-R>', 'hint --rapid links tab-bg', mode='hint')
config.bind('<Return>', 'hint-follow'              , mode='hint')
#+end_src

* New Key Bindings
** Info
Map keys to other keys, so that they are equivalent in all modes. When
the key used as dictionary-key is pressed, the binding for the key
used as dictionary-value is invoked instead. This is useful for global
remappings of keys, for example to map <Ctrl-[> to <Escape>. NOTE:
This should only be used if two keys should always be equivalent, i.e.
for things like <Enter> (keypad) and <Return> (non-keypad). For normal
command bindings, qutebrowser works differently to vim: You always
bind keys to commands, usually via `:bind` or `config.bind()`. Instead
of using this setting, consider finding the command a key is bound to
(e.g. via `:bind gg`) and then binding the same command to the desired
key. Note that when a key is bound (via `bindings.default` or
`bindings.commands`), the mapping is ignored.

# Type: Dict
#+begin_src python
# c.bindings.key_mappings = {'<Ctrl-[>': '<Escape>', '<Ctrl-6>': '<Ctrl-^>', '<Ctrl-M>': '<Return>', '<Ctrl-J>': '<Return>', '<Ctrl-I>': '<Tab>', '<Shift-Return>': '<Return>', '<Enter>': '<Return>', '<Shift-Enter>': '<Return>', '<Ctrl-Enter>': '<Ctrl-Return>'}
#+end_src
** root
#+begin_src python
config.bind(':', 'cmd-set-text :')
config.bind('.', 'cmd-repeat-last')

config.bind('D', 'cmd-set-text -s :download')
config.bind('u', 'undo')
config.bind('U', 'undo -w')

config.bind('x', 'tab-close')
config.bind('X', 'undo')

config.bind('<Ctrl-N>', 'open -w')
config.bind('<Ctrl-Shift-W>', 'close')
config.bind('<Ctrl-Shift-T>', 'undo')
config.bind('<Ctrl-W>', 'tab-close')

# config.bind('<Ctrl-c>', 'stop')
config.bind('<Ctrl-c>', 'yank selection', mode='normal')
config.bind('<Ctrl-c>', 'yank selection', mode='insert')
config.bind('<Ctrl-c>', 'yank selection', mode='passthrough')

config.bind('<Ctrl-B>', 'scroll-page 0 -1')
config.bind('<Ctrl-F>', 'scroll-page 0 1')
config.bind('<Ctrl-U>', 'scroll-page 0 -0.5')
config.bind('<Ctrl-D>', 'scroll-page 0 0.5')

config.bind('<Alt-m>', 'tab-mute')
config.bind('<Alt-p>', 'tab-pin')
config.bind('<Alt-p>', 'tab-pin', mode='insert')
config.bind('<Ctrl-Alt-p>', 'print')

config.bind('<Alt-x>', 'cmd-set-text :')

# move tabs
config.bind('>', 'tab-move +')
config.bind('<', 'tab-move -')
config.bind('<Alt-j>', 'tab-move +')
config.bind('<Alt-k>', 'tab-move -')
config.bind('<Alt-Shift-j>', 'tab-move end')
config.bind('<Alt-Shift-k>', 'tab-move start')

# following focused links
config.bind('<Return>', 'selection-follow')
config.bind('<Shift-Return>', 'selection-follow -t')

config.bind('<back>', 'back')
config.bind('<forward>', 'forward')
config.bind('H', 'back')
config.bind('L', 'forward')

config.bind('<Ctrl-Shift-h>', 'back -b')
config.bind('<Ctrl-Shift-l>', 'forward -b')

config.bind('<Ctrl-h>', 'home')
config.bind('<Ctrl-T>', 'open -t')

# go to url
config.bind('o', 'cmd-set-text -s :open')
config.bind('O', 'cmd-set-text -s :open -t')
#+end_src

*** Search
#+begin_src python
config.bind('/', 'cmd-set-text /')
config.bind('?', 'cmd-set-text ?')

config.bind('n', 'search-next')
config.bind('N', 'search-prev')
#+end_src

*** Scroll
#+begin_src python
config.bind('h', 'scroll left')
config.bind('j', 'scroll down')
config.bind('k', 'scroll up')
config.bind('l', 'scroll right')
config.bind('J', 'cmd-run-with-count 5 scroll down')
config.bind('K', 'cmd-run-with-count 5 scroll up')
#+end_src

*** Zoom
#+begin_src python
config.bind('<Ctrl-0>', 'zoom')
config.bind('<Ctrl-->', 'zoom-out')
config.bind('<Ctrl-=>', 'zoom-in')
#+end_src

*** Follow
#+begin_src python
config.bind('f', 'hint')
config.bind('F', 'hint all tab')

# rapid - open in background and remain in hint mode
config.bind('<Ctrl-f>', 'hint --rapid')
#+end_src

*** Reload
#+begin_src python
config.bind('r', 'reload')
config.bind('R', 'reload -f')
config.bind('<Ctrl-R>', 'reload -f')
#+end_src

*** Macros
#+begin_src python
config.bind('q', 'macro-record')
config.bind('@', 'macro-run')
#+end_src

*** Switching Tabs
Direct tab navigation
#+begin_src python
config.bind('<Alt-1>', 'tab-focus 1')
config.bind('<Alt-2>', 'tab-focus 2')
config.bind('<Alt-3>', 'tab-focus 3')
config.bind('<Alt-4>', 'tab-focus 4')
config.bind('<Alt-5>', 'tab-focus 5')
config.bind('<Alt-6>', 'tab-focus 6')
config.bind('<Alt-7>', 'tab-focus 7')
config.bind('<Alt-8>', 'tab-focus 8')
config.bind('<Alt-9>', 'tab-focus 9')
config.bind('<Alt-0>', 'tab-focus -1')
config.bind('<Alt-`>', 'tab-focus last')
#+end_src

Adjacent tabs
#+begin_src python
config.bind('<Alt-PgDown>', 'tab-next')
config.bind('<Alt-PgUp>', 'tab-prev')
config.bind('<Alt-l>', 'tab-next')
config.bind('<Alt-h>', 'tab-prev')
config.bind('<Alt-Ctrl-l>', 'tab-focus stack-next')
config.bind('<Alt-Ctrl-h>', 'tab-focus stack-prev')
config.bind('<Alt-Shift-l>', 'tab-focus -1')
config.bind('<Alt-Shift-h>', 'tab-focus 1')
#+end_src

** ; hints
#+begin_src python
config.bind(';i', 'hint inputs')

config.bind(';m', 'hint media')
config.bind(';p', 'hint images')
config.bind(';P', 'hint images tab')

config.bind(';h', 'hint all hover')

# media
# config.bind(';c', 'hint links spawn --userscript cast {url}'                 ) # cast video
config.bind(';c', 'hint links spawn ~/.local/bin/cast-to-tv.sh "{hint-url}"' ) # cast video
config.bind(';v', 'hint links spawn mpv {hint-url}'                          ) # play video
config.bind(';a', 'hint links spawn mpv {hint-url} --no-video'               ) # play audio

# rapid
config.bind(';ri', 'hint --rapid images tab-bg')
config.bind(';Ri', 'hint --rapid images window')

config.bind(';rl', 'hint --rapid links tab-bg')
config.bind(';Rl', 'hint --rapid links window')

# edit link url before opening
config.bind(';o', 'hint links fill :open {hint-url}')
config.bind(';O', 'hint links fill :open -t -r {hint-url}')

# delete element
config.bind(';da', 'hint all delete')
config.bind(';dl', 'hint links delete')
config.bind(';di', 'hint images delete')
config.bind(';dm', 'hint media delete')
#+end_src

** brackets
#+begin_src python
config.bind('[[', 'navigate prev')
config.bind(']]', 'navigate next')
config.bind('{{', 'navigate prev -t')
config.bind('}}', 'navigate next -t')
#+end_src

** b bookmarks / quickmarks
#+begin_src python
# open in current tab
config.bind('bo', 'cmd-set-text -s :quickmark-load')
config.bind('Bo', 'cmd-set-text -s :bookmark-load')

# open in new tab
config.bind('bO', 'cmd-set-text -s :quickmark-load -t')
config.bind('BO', 'cmd-set-text -s :bookmark-load -t')

# adding bookmarks
config.bind('bs', 'quickmark-save')
config.bind('Bs', 'bookmark-add')
config.bind('ba', 'quickmark-add {url} "{title}" ;; message-info "Quickmark saved!"')
config.bind('bA', 'cmd-set-text :quickmark-add {url} "{title}"')
config.bind('Ba', 'bookmark-add {url} "{title}"')
config.bind('BA', 'cmd-set-text :bookmark-add {url} "{title}"')

# deleting bookmarks
config.bind('bd', 'quickmark-del ;; message-info "Quickmark {url} deleted!')
config.bind('Bd', 'bookmark-del')
#+end_src

** c clear
#+begin_src python
config.bind('cm', 'clear-messages')
#+end_src
** d download
#+begin_src python
config.bind('ds', 'download-cancel')
config.bind('dC', 'download-cancel')

config.bind('dx', 'download-remove')
config.bind('dr', 'download-retry')
config.bind('dc', 'download-clear')

config.bind('do', 'download-open')
config.bind('dX', 'download-delete')
config.bind('dD', 'download-delete')

# hints
config.bind('di', 'hint images download')
config.bind('dl', 'hint links download')
config.bind('dt', 'hint links spawn transmission-remote -a {hint-url}')
config.bind('dv', 'hint links spawn alacritty -e yt-dlp {hint-url}')
config.bind('da', 'hint links spawn alacritty -e yt-dlp --config-locations ~/.config/yt-dlp/audio.conf {hint-url}')

# download current
config.bind('dV', 'spawn alacritty -e yt-dlp {url}')
config.bind('dA', 'spawn alacritty -e yt-dlp --config-locations ~/.config/yt-dlp/audio.conf {url}')

# prompt mode
config.bind('<Ctrl-P>', 'prompt-open-download --pdfjs', mode='prompt')
config.bind('<Ctrl-X>', 'prompt-open-download', mode='prompt')
#+end_src
** g goto
#+begin_src python
config.bind('g=', 'navigate increment')
config.bind('g-', 'navigate decrement')
config.bind('g<Backspace>', 'navigate up')
config.bind('gu', 'navigate up')
config.bind('gU', 'navigate up -t')
config.bind('gs', 'navigate strip')

config.bind('gt', 'cmd-set-text -sr :tab-focus')

config.bind('gg', 'scroll-to-perc 0')
config.bind('G', 'scroll-to-perc')

config.bind('gh', 'history -t')

# bookmark list
config.bind('gq', 'bookmark-list --tab')
config.bind('gb', 'bookmark-list --tab --jump')

# edit current url
config.bind('go', 'cmd-set-text :open {url:pretty}')
config.bind('gO', 'cmd-set-text :open -t -r {url:pretty}')
config.bind('gS', 'cmd-set-text :open -b -r {url:pretty}')
#+end_src

** p pass / paste
#+begin_src python
# Command Mode
config.bind('<Ctrl-p><g>'      , 'spawn --output-messages pass generate --clip "{url:host}" 50'                )

config.bind('<Ctrl-p><a>'      , 'spawn --userscript qute-pass --dmenu-invocation "wofi --dmenu" --username-target secret --username-pattern "(?:login|user): (.+)"'                )
config.bind('<Ctrl-p><u>'      , 'spawn --userscript qute-pass --dmenu-invocation "wofi --dmenu" --username-target secret --username-pattern "(?:login|user): (.+)" --username-only')
config.bind('<Ctrl-p><p>'      , 'spawn --userscript qute-pass --dmenu-invocation "wofi --dmenu" --username-target secret --username-pattern "(?:login|user): (.+)" --password-only')
config.bind('<Ctrl-p><o>'      , 'spawn --userscript qute-pass --dmenu-invocation "wofi --dmenu" --username-target secret --username-pattern "(?:login|user): (.+)" --otp-only'     )
config.bind('<Ctrl-p><Shift-p>', 'spawn --userscript qute-pass --dmenu-invocation "wofi --dmenu" --username-target secret --username-pattern "(?:pin): (.+)" --username-only'       )

# Insert Mode
config.bind('<Ctrl-p><a>'      , 'spawn --userscript qute-pass --dmenu-invocation "wofi --dmenu" --username-target secret --username-pattern "(?:login|user): (.+)"'                , mode='insert')
config.bind('<Ctrl-p><u>'      , 'spawn --userscript qute-pass --dmenu-invocation "wofi --dmenu" --username-target secret --username-pattern "(?:login|user): (.+)" --username-only', mode='insert')
config.bind('<Ctrl-p><p>'      , 'spawn --userscript qute-pass --dmenu-invocation "wofi --dmenu" --username-target secret --username-pattern "(?:login|user): (.+)" --password-only', mode='insert')
config.bind('<Ctrl-p><o>'      , 'spawn --userscript qute-pass --dmenu-invocation "wofi --dmenu" --username-target secret --username-pattern "(?:login|user): (.+)" --otp-only'     , mode='insert')
config.bind('<Ctrl-p><Shift-p>', 'spawn --userscript qute-pass --dmenu-invocation "wofi --dmenu" --username-target secret --username-pattern "(?:pin): (.+)" --username-only'       , mode='insert')
#+end_src

Open URL from clipboard
#+begin_src python
config.bind('pp', 'open -- {clipboard}')
config.bind('pP', 'open -- {primary}')
#+end_src

** TODO s set
#+begin_src python
config.bind('Ss', 'set')
config.bind('ss', 'cmd-set-text -s :set')
config.bind('sl', 'cmd-set-text -s :set -t')

config.bind('sk', 'cmd-set-text -s :bind')

config.bind('sf', 'save')
#+end_src

** t tabs
#+begin_src python
config.bind('tn', 'open -t')

config.bind('t0', 'tab-focus 1')
config.bind('t^', 'tab-focus 1')
config.bind('t$', 'tab-focus -1')

config.bind('tm', 'tab-move')
config.bind('tj', 'tab-move +')
config.bind('tk', 'tab-move -')
config.bind('tJ', 'tab-move end')
config.bind('tK', 'tab-move start')

config.bind('tH', 'back -t')
config.bind('tL', 'forward -t')

# config.bind('tO', 'tab-only')

# give and take
config.bind('tG', 'tab-give')
config.bind('tP', 'tab-give --private')
config.bind('tg', 'cmd-set-text -s :tab-give')
config.bind('tt', 'cmd-set-text -s :tab-take')
#+end_src

*** c clone
#+begin_src python
config.bind('tcc', 'tab-clone')
config.bind('tcG', 'tab-give --keep')
config.bind('tcP', 'tab-give --keep --private')
config.bind('tcg', 'cmd-set-text -s :tab-give --keep')
config.bind('tct', 'cmd-set-text -s :tab-take --keep')
#+end_src

** w window
#+begin_src python
config.bind('wn', 'open -w')
config.bind('wH', 'back -w')
config.bind('wL', 'forward -w')

config.bind('wf', 'hint all window')

config.bind('wb', 'cmd-set-text -s :quickmark-load -w')
config.bind('wB', 'cmd-set-text -s :bookmark-load -w')
#+end_src

** y yanking
#+begin_src python
config.bind('ys', 'yank selection', mode='normal')

# yank page
config.bind('yy', 'yank')
config.bind('Yy', 'yank -s')

config.bind('yp', 'yank pretty-url')
config.bind('Yp', 'yank pretty-url -s')

config.bind('yd', 'yank domain')
config.bind('Yd', 'yank domain -s')

config.bind('yt', 'yank title')
config.bind('Yt', 'yank title -s')

# yank as link for markup documents
config.bind('ym', 'yank inline [{title}]({url})')
config.bind('Ym', 'yank inline [{title}]({url}) -s')

# yank as link for org documents
config.bind('yo', 'yank inline [[{url}][{title}]]')
config.bind('Yo', 'yank inline [[{url}][{title}]] -s')

# yank link
config.bind('yl', 'hint links yank')
config.bind('Yl', 'hint links yank-primary')
config.bind('yi', 'hint images yank')
config.bind('Yi', 'hint images yank-primary')
#+end_src

** z cycle config
#+begin_src python
config.bind('zCH', 'config-cycle -p -u *://*.{url:host}/* content.cookies.accept all no-3rdparty never ;; reload')
config.bind('zCh', 'config-cycle -p -u *://{url:host}/* content.cookies.accept all no-3rdparty never ;; reload')
config.bind('zCu', 'config-cycle -p -u {url} content.cookies.accept all no-3rdparty never ;; reload')
config.bind('zIH', 'config-cycle -p -u *://*.{url:host}/* content.images ;; reload')
config.bind('zIh', 'config-cycle -p -u *://{url:host}/* content.images ;; reload')
config.bind('zIu', 'config-cycle -p -u {url} content.images ;; reload')
config.bind('zPH', 'config-cycle -p -u *://*.{url:host}/* content.plugins ;; reload')
config.bind('zPh', 'config-cycle -p -u *://{url:host}/* content.plugins ;; reload')
config.bind('zPu', 'config-cycle -p -u {url} content.plugins ;; reload')
config.bind('zSH', 'config-cycle -p -u *://*.{url:host}/* content.javascript.enabled ;; reload')
config.bind('zSh', 'config-cycle -p -u *://{url:host}/* content.javascript.enabled ;; reload')
config.bind('zSu', 'config-cycle -p -u {url} content.javascript.enabled ;; reload')
config.bind('zcH', 'config-cycle -p -t -u *://*.{url:host}/* content.cookies.accept all no-3rdparty never ;; reload')
config.bind('zch', 'config-cycle -p -t -u *://{url:host}/* content.cookies.accept all no-3rdparty never ;; reload')
config.bind('zcu', 'config-cycle -p -t -u {url} content.cookies.accept all no-3rdparty never ;; reload')
config.bind('ziH', 'config-cycle -p -t -u *://*.{url:host}/* content.images ;; reload')
config.bind('zih', 'config-cycle -p -t -u *://{url:host}/* content.images ;; reload')
config.bind('ziu', 'config-cycle -p -t -u {url} content.images ;; reload')
config.bind('zpH', 'config-cycle -p -t -u *://*.{url:host}/* content.plugins ;; reload')
config.bind('zph', 'config-cycle -p -t -u *://{url:host}/* content.plugins ;; reload')
config.bind('zpu', 'config-cycle -p -t -u {url} content.plugins ;; reload')
config.bind('zsH', 'config-cycle -p -t -u *://*.{url:host}/* content.javascript.enabled ;; reload')
config.bind('zsh', 'config-cycle -p -t -u *://{url:host}/* content.javascript.enabled ;; reload')
config.bind('zsu', 'config-cycle -p -t -u {url} content.javascript.enabled ;; reload')
#+end_src

** misc
#+begin_src python
config.bind('<Ctrl-Shift-Tab>', 'nop')

config.bind('<Escape>', 'clear-keychain ;; search ;; fullscreen --leave ;; clear-messages')

config.bind('<F1>'     , 'help -t')
config.bind('<F5>'     , 'reload')
config.bind('<Ctrl-F5>', 'reload -f')
config.bind('<F11>'    , 'fullscreen')
#+end_src

** leader
#+begin_src python
config.bind('<Space>p', 'cmd-set-text -s :process')
config.bind('<Space>m', ':messages -t')

# tabs menu
config.bind('<Space>`', 'tab-focus last')
config.bind('<Space>,', 'cmd-set-text -sr :tab-focus')
config.bind('<Space><', 'cmd-set-text -sr :tab-select')
#+end_src

*** a audio
*** c change
#+begin_src python
# change css themes
config.bind('<Space>ca' , 'config-cycle content.user_stylesheets ~/.config/qutebrowser/solarized-everything-css/css/apprentice/apprentice-all-sites.css ""')
config.bind('<Space>cd' , 'config-cycle content.user_stylesheets ~/.config/qutebrowser/solarized-everything-css/css/darculized/darculized-all-sites.css ""')
config.bind('<Space>cg' , 'config-cycle content.user_stylesheets ~/.config/qutebrowser/solarized-everything-css/css/gruvbox/gruvbox-all-sites.css ""')
config.bind('<Space>csd', 'config-cycle content.user_stylesheets ~/.config/qutebrowser/solarized-everything-css/css/solarized-dark/solarized-dark-all-sites.css ""')
config.bind('<Space>csl', 'config-cycle content.user_stylesheets ~/.config/qutebrowser/solarized-everything-css/css/solarized-light/solarized-light-all-sites.css ""')
#+end_src

*** d dev
#+begin_src python
config.bind('<Space>ds', 'view-source')

config.bind('<Space>dt', 'devtools')
config.bind('<Space>dd', 'devtools')
config.bind('<Space>df', 'devtools-focus')

config.bind('<Space>dH', 'devtools left')
config.bind('<Space>dL', 'devtools right')
config.bind('<Space>dJ', 'devtools bottom')
config.bind('<Space>dK', 'devtools top')
config.bind('<Space>dW', 'devtools window')

config.bind('<Space>dD', 'hint all delete')
#+end_src

*** h help
#+begin_src python
config.bind('<Space>hr', 'config-source')
config.bind('<Space>hh', 'help -t')
config.bind('<Space>hs', 'cmd-set-text -s :help -t')
config.bind('<Space>hv', 'version')
config.bind('<Space>hc', 'set')
config.bind('<Space>hl', 'messages -t')
config.bind('<Space>hi', 'version')
#+end_src

*** q quit
#+begin_src python
config.bind('<Space>qq', 'quit')
config.bind('<Space>qr', 'restart')
#+end_src

*** t toggle
#+begin_src python
# tab and status bars
config.bind('<Space>tt', 'config-cycle tabs.show multiple never')
config.bind('<Space>tb', 'config-cycle statusbar.show always never')
config.bind('<Space>tz', 'config-cycle tabs.show multiple never ;; config-cycle statusbar.show always never')

# dark mode
config.bind('<Space>td' , 'config-cycle -p colors.webpage.darkmode.enabled ')

# go to url
config.bind('<Space>to', 'cmd-set-text -s :open -t')
config.bind('<Space>tO', 'cmd-set-text :open -t {url:pretty}')

# open url from clipboard
config.bind('<Space>tp', 'open -t -- {clipboard}')
config.bind('<Space>tP', 'open -t -- {primary}')
#+end_src

*** v video
#+begin_src python
# config.bind('<Space>vc', 'spawn --userscript cast {url}'            ) # cast current video
config.bind('<Space>vc', 'spawn ~/.local/bin/cast-to-tv.sh "{url}"' ) # cast current video
config.bind('<Space>vv', 'spawn mpv {url}'           ) # play current video
config.bind('<Space>va', 'spawn mpv {url} --no-video') # play current audio
#+end_src

You can find the script here: https://github.com/mpv-player/mpv/blob/master/TOOLS/umpv

It also works nicely with rapid hints:

:bind ,m spawn umpv {url}
:bind ,M hint links spawn umpv {hint-url}
:bind ;M hint --rapid links spawn umpv {hint-url}

*** w window
#+begin_src python
config.bind('<Space>wq', 'close')
config.bind('<Space>wO', 'window-only')

config.bind('<Space>wu', 'undo -w')
#+end_src

*** tab sessions
#+begin_src python
config.bind('<Space><Tab>c', 'session-save -c ;; cmd-set-text -s :session-load --clear')
config.bind('<Space><Tab>d', 'cmd-set-text -s :session-delete')
config.bind('<Space><Tab>l', 'cmd-set-text -s :session-load')
config.bind('<Space><Tab>R', 'session-load -f autosave')
config.bind('<Space><Tab>s', 'cmd-set-text -s :session-save --only-active-window')
config.bind('<Space><Tab>S', 'cmd-set-text -s :session-save')
config.bind('<Space><Tab>t', 'cmd-set-text -s :session-load -temp')
config.bind('<Space><Tab>u', 'session-save')
config.bind('<Space><Tab>x', 'cmd-set-text -s :session-delete')
#+end_src

* Privacy
Allow websites to read canvas elements. Note this is needed for some
websites to work properly.
# Type: =Bool=
#+begin_src python
c.content.canvas_reading = True
#+end_src

** YouTube Add Blocking
#+begin_src python
def filter_yt(info: interceptor.Request):
    """Block the given request if necessary."""
    url = info.request_url
    if (
        url.host() == "www.youtube.com"
        and url.path() == "/get_video_info"
        and "&adformat=" in url.query()
    ):
        info.block()


interceptor.register(filter_yt)
#+end_src

** Ad Blocking
Enable the ad/host blocker
Type: =Bool=
#+begin_src python
c.content.blocking.enabled = True
#+end_src

Which method of blocking ads should be used.  Support for Adblock Plus (ABP) syntax blocklists using Brave's Rust library requires the =adblock= Python package to be installed, which is an optional dependency of qutebrowser. It is required when either =adblock= or =both= are selected.
# Type: String
Valid values:
- auto: Use Brave's ABP-style adblocker if available, host blocking otherwise
- adblock: Use Brave's ABP-style adblocker
- hosts: Use hosts blocking
- both: Use both hosts blocking and Brave's ABP-style adblocker
#+begin_src python
c.content.blocking.method = "both"
#+end_src

List of URLs to ABP-style adblocking rulesets. Only used when Brave's ABP-style adblocker is used (see =content.blocking.method=). You can find an overview of available lists here:
https://adblockplus.org/en/subscriptions - note that the special =subscribe.adblockplus.org= links aren't handled by qutebrowser, you will instead need to find the link to the raw =.txt= file (e.g. by extracting it from the =location= parameter of the subscribe URL and URL-decoding it).
# Type: List of Url
Some handy lists available here https://easylist.to/
#+begin_src python
c.content.blocking.adblock.lists = [
    'https://easylist.to/easylist/easylist.txt',
    'https://easylist.to/easylist/easyprivacy.txt',
    # 'https://secure.fanboy.co.nz/fanboy-cookiemonster.txt',
    # 'https://easylist.to/easylist/fanboy-social.txt',
    # 'https://secure.fanboy.co.nz/fanboy-annoyance.txt',
]
#+end_src

List of URLs to host blocklists for the host blocker.  Only used when the simple host-blocker is used (see =content.blocking.method=).  The file can be in one of the following formats:  - An =/etc/hosts=-like file - One host per line - A zip-file of any of the above, with either only one file, or a file   named =hosts= (with any extension).  It's also possible to add a local file or directory via a file:// URL. In case of a directory, all files in the directory are read as adblock lists.  The file =~/.config/qutebrowser/blocked-hosts= is always read if it exists.
# Type: List of Url
#+begin_src python
# c.content.blocking.hosts.lists = ['https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts']
#+end_src

A list of patterns that should always be loaded, despite being blocked by the ad-/host-blocker. Local domains are always exempt from adblocking. Note this whitelists otherwise blocked requests, not first-party URLs. As an example, if =example.org= loads an ad from =ads.example.org=, the whitelist entry could be =https://ads.example.org/*=. If you want to disable the adblocker on a given page, use the =content.blocking.enabled= setting with a URL pattern instead.
# Type: List of =UrlPattern=
#+begin_src python
c.content.blocking.whitelist = []
#+end_src

** Cookies
Which cookies to accept. With =QtWebEngine=, this setting also controls other
features with tracking capabilities similar to those of cookies; including
=IndexedDB=, DOM storage, =filesystem= API, service workers, and =AppCache=. Note that
with =QtWebKit=, only =all= and =never= are supported as per-domain values.
Setting =no-3rdparty= or =no-unknown-3rdparty= per-domain on =QtWebKit= will have
the same effect as =all=. If this setting is used with URL patterns, the pattern
gets applied to the origin/first party URL of the page making the request, not
the request URL. With =QtWebEngine= 5.15.0+, paths will be stripped from URLs, so
URL patterns using paths will not match. With =QtWebEngine= 5.15.2+, subdomains
are additionally stripped as well, so you will typically need to set this
setting for =example.com= when the cookie is set on =somesubdomain.example.com=
for it to work properly. To debug issues with this setting, start qutebrowser
with =--debug --logfilter network --debug-flag log-cookies= which will show all
cookies being set.
Valid values:
- all: Accept all cookies.
- no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
- no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On =QtWebEngine=, this is the same as no-3rdparty.
- never: Don't accept cookies at all.
#+begin_src python
c.content.cookies.accept = "no-3rdparty"
#+end_src

Store cookies.
# Type: =Bool=
#+begin_src python
c.content.cookies.store = True
#+end_src

Enable support for HTML 5 local storage and Web SQL.
# Type: =Bool=
#+begin_src python
c.content.local_storage = True
#+end_src

** Cache
Enable support for the HTML 5 web application cache feature. An application cache acts like an HTTP cache in some sense. For documents that use the application cache via JavaScript, the loader engine will first ask the application cache for the contents, before hitting the network.
Not available with the =QtWebEngine= backend
# Type: Bool
#+begin_src python
# c.content.cache.appcache = True
#+end_src

Maximum number of pages to hold in the global memory page cache. The page cache allows for a nicer user experience when navigating forth or back to pages in the forward/back history, by pausing and resuming up to _n_ pages. For more information about the feature, please refer to:
https://webkit.org/blog/427/webkit-page-cache-i-the-basics/
# Type: Int
#+begin_src python
# c.content.cache.maximum_pages = 0
#+end_src

Size (in bytes) of the HTTP network cache. Null to use the default value. With QtWebEngine, the maximum supported value is 2147483647 (~2 GB).
# Type: Int
#+begin_src python
# c.content.cache.size = None
#+end_src

* Permissions
Type: =BoolAsk=
Valid values:
- true
- false
- ask
=desktop_capture=: Allow websites to share screen content.
=geolocation=: Allow websites to request geolocations.
=media.audio_capture=: Allow websites to record audio.
=media.video_capture=: Allow websites to record video.
=media.audio_video_capture=: Allow websites to record audio and video.
=mouse_lock=: Allow websites to lock your mouse pointer.
=notifications.enabled=: Allow websites to show notifications.
=persistent_storage=: Allow websites to request persistent storage quota via `navigator.webkitPersistentStorage.requestQuota`.

#+begin_src python
c.content.desktop_capture = "ask"
c.content.geolocation = "ask"
c.content.media.audio_capture = "ask"
c.content.media.video_capture = "ask"
c.content.media.audio_video_capture = "ask"
c.content.mouse_lock = "ask"
c.content.notifications.enabled = "ask"
c.content.persistent_storage = 'ask'
#+end_src

* JavaScript
#+begin_src python
# Show javascript alerts.
# Type: Bool
# c.content.javascript.alert = True

# Allow JavaScript to read from or write to the clipboard. With
# QtWebEngine, writing the clipboard as response to a user interaction
# is always allowed.
# Type: Bool
# c.content.javascript.can_access_clipboard = False

# Allow JavaScript to close tabs.
# Type: Bool
# c.content.javascript.can_close_tabs = False

# Allow JavaScript to open new tabs without user interaction.
# Type: Bool
# c.content.javascript.can_open_tabs_automatically = False

# Enable JavaScript.
# Type: Bool
# c.content.javascript.enabled = True

# Log levels to use for JavaScript console logging messages. When a
# JavaScript message with the level given in the dictionary key is
# logged, the corresponding dictionary value selects the qutebrowser
# logger to use. On QtWebKit, the "unknown" setting is always used. The
# following levels are valid: `none`, `debug`, `info`, `warning`,
# `error`.
# Type: Dict
# c.content.javascript.log = {'unknown': 'debug', 'info': 'debug', 'warning': 'debug', 'error': 'debug'}

# Use the standard JavaScript modal dialog for `alert()` and
# `confirm()`.
# Type: Bool
# c.content.javascript.modal_dialog = False

# Show javascript prompts.
# Type: Bool
# c.content.javascript.prompt = True


#+end_src

* Notifications
What notification presenter to use for web notifications. Note that not all implementations support all features of notifications: - With =PyQt= 5.14, any setting other than =qt= does not support  the =click= and   =close= events, as well as the =tag= option to replace existing notifications. - The =qt= and =systray= options only support showing one notification at the time   and ignore the =tag= option to replace existing notifications. - The =herbe= option only supports showing one notification at the time and doesn't   show icons. - The =messages= option doesn't show icons and doesn't support the =click= and =close= events.
# Type: String
Valid values:
- =auto=: Tries =libnotify=, =systray= and =messages=, uses the first one available without showing error messages.
- =qt=: Use =Qt's= native notification presenter, based on a system tray icon. Switching from or to this value requires a restart of qutebrowser. Recommended over =systray= on =PyQt= 5.14.
- =libnotify=: Shows messages via =DBus= in a =libnotify=-compatible way. If =DBus= isn't available, falls back to =systray= or =messages=, but shows an error message.
- =systray=: Use a notification presenter based on a =systray= icon. Falls back to =libnotify= or =messages= if not =systray= is available. This is a =reimplementation= of the =qt= setting value, but with the possibility to switch to it at runtime.
- =messages=: Show notifications as qutebrowser messages. Most notification features aren't available.
- =herbe=: (experimental!) Show notifications using =herbe= (=github.com/dudik/herbe=). Most notification features aren't available.
#+begin_src python
c.content.notifications.presenter = 'auto'
#+end_src

Whether to show the origin URL for notifications. Note that URL patterns with this setting only get matched against the origin part of the URL, so e.g. paths in patterns will never match. Note that with the `qt` presenter, origins are never shown.
# Type: Bool
#+begin_src python
c.content.notifications.show_origin = True
#+end_src

* Spell Checking
Languages to use for spell checking. You can check for available
languages and install dictionaries using scripts/dictcli.py. Run the
script with -h/--help for instructions.
Type: List of String
#+begin_src python
c.spellcheck.languages = [
    "en-US",
    "ru-RU",
]
#+end_src
** Valid values
|-------+--------------------------|
| Value | Language                 |
|-------+--------------------------|
| af-ZA | Afrikaans (South Africa) |
| bg-BG | Bulgarian (Bulgaria)     |
| ca-ES | Catalan (Spain)          |
| cs-CZ | Czech (Czech Republic)   |
| da-DK | Danish (Denmark)         |
| de-DE | German (Germany)         |
| el-GR | Greek (Greece)           |
| en-AU | English (Australia)      |
| en-CA | English (Canada)         |
| en-GB | English (United Kingdom) |
| en-US | English (United States)  |
| es-ES | Spanish (Spain)          |
| et-EE | Estonian (Estonia)       |
| fa-IR | Farsi (Iran)             |
| fo-FO | Faroese (Faroe Islands)  |
| fr-FR | French (France)          |
| he-IL | Hebrew (Israel)          |
| hi-IN | Hindi (India)            |
| hr-HR | Croatian (Croatia)       |
| hu-HU | Hungarian (Hungary)      |
| id-ID | Indonesian (Indonesia)   |
| it-IT | Italian (Italy)          |
| ko    | Korean                   |
| lt-LT | Lithuanian (Lithuania)   |
| lv-LV | Latvian (Latvia)         |
| nb-NO | Norwegian (Norway)       |
| nl-NL | Dutch (Netherlands)      |
| pl-PL | Polish (Poland)          |
| pt-BR | Portuguese (Brazil)      |
| pt-PT | Portuguese (Portugal)    |
| ro-RO | Romanian (Romania)       |
| ru-RU | Russian (Russia)         |
| sh    | Serbo-Croatian           |
| sk-SK | Slovak (Slovakia)        |
| sl-SI | Slovenian (Slovenia)     |
| sq    | Albanian                 |
| sr    | Serbian                  |
| sv-SE | Swedish (Sweden)         |
| ta-IN | Tamil (India)            |
| tg-TG | Tajik (Tajikistan)       |
| tr-TR | Turkish (Turkey)         |
| uk-UA | Ukrainian (Ukraine)      |
| vi-VN | Vietnamese (Viet Nam)    |
|-------+--------------------------|

* Hints
When a hint can be automatically followed without pressing Enter.
# Type: String
Valid values:
- always: Auto-follow whenever there is only a single hint on a page.
- unique-match: Auto-follow whenever there is a unique non-empty match in either the hint string (word mode) or filter (number mode).
- full-match: Follow the hint when the user typed the whole hint (letter, word or number mode) or the element's text (only in number mode).
- never: The user will always need to press Enter to follow a hint.
#+begin_src python
c.hints.auto_follow = 'unique-match'
#+end_src

Duration (in milliseconds) to ignore normal-mode key bindings after a
successful auto-follow.
# Type: Int
#+begin_src python
c.hints.auto_follow_timeout = 0
#+end_src

CSS border value for hints.
# Type: String
#+begin_src python
# c.hints.border = '1px solid #E3BE23'
#+end_src

Characters used for hint strings.
# Type: =UniqueCharString=
#+begin_src python
# c.hints.chars = 'asdfghjkl'
c.hints.chars = 'qwertyuopasdfghjk;zxcvbnm'
#+end_src

Dictionary file to be used by the word hints.
# Type: File
#+begin_src python
c.hints.dictionary = '/usr/share/dict/words'
#+end_src

Which implementation to use to find elements to hint.
Not available with the =QtWebEngine= backend
# Type: String
Valid values:
- javascript: Better but slower
- python: Slightly worse but faster
#+begin_src python
# c.hints.find_implementation = 'python'
#+end_src

Hide unmatched hints in rapid mode.
# Type: Bool
#+begin_src python
c.hints.hide_unmatched_rapid_hints = True
#+end_src

Leave hint mode when starting a new page load.
# Type: Bool
#+begin_src python
c.hints.leave_on_load = False
#+end_src

Minimum number of characters used for hint strings.
# Type: Int
#+begin_src python
c.hints.min_chars = 1
#+end_src

Mode to use for hints.
# Type: String
Valid values:
- number: Use numeric hints. (In this mode you can also type letters from the hinted element to filter and reduce the number of elements that are hinted.)
- letter: Use the characters in the `hints.chars` setting.
- word: Use hints words based on the html elements and the extra words.
#+begin_src python
c.hints.mode = 'letter'
#+end_src

Comma-separated list of regular expressions to use for 'next' links.
# Type: List of Regex
#+begin_src python
c.hints.next_regexes = ['\\bnext\\b', '\\bmore\\b', '\\bnewer\\b', '\\b[>→≫]\\b', '\\b(>>|»)\\b', '\\bcontinue\\b']
#+end_src

Comma-separated list of regular expressions to use for 'prev' links.
# Type: List of Regex
#+begin_src python
c.hints.prev_regexes = ['\\bprev(ious)?\\b', '\\bback\\b', '\\bolder\\b', '\\b[<←≪]\\b', '\\b(<<|«)\\b']
#+end_src

Padding (in pixels) for hints.
# Type: Padding
#+begin_src python
c.hints.padding = {'top': 0, 'bottom': 0, 'left': 3, 'right': 3}
#+end_src

Rounding radius (in pixels) for the edges of hints.
# Type: Int
#+begin_src python
c.hints.radius = 3
#+end_src

Scatter hint key chains (like Vimium) or not (like dwb). Ignored for
number hints.
# Type: Bool
#+begin_src python
c.hints.scatter = True
#+end_src

CSS selectors used to determine which elements on a page should have
hints.
# Type: Dict
#+begin_src python
c.hints.selectors = {
    'all': ['a', 'area', 'textarea', 'select', 'input:not([type="hidden"])', 'button', 'frame', 'iframe', 'img', 'link', 'summary', '[contenteditable]:not([contenteditable="false"])', '[onclick]', '[onmousedown]', '[role="link"]', '[role="option"]', '[role="button"]', '[ng-click]', '[ngClick]', '[data-ng-click]', '[x-ng-click]', '[tabindex]'],
    'links': ['a[href]', 'area[href]', 'link[href]', '[role="link"][href]'],
    'images': ['img'],
    'media': ['audio', 'img', 'video'],
    'video': ['audio', 'video'],
    'url': ['[src]', '[href]'],
    'inputs': ['input[type="text"]', 'input[type="date"]', 'input[type="datetime-local"]', 'input[type="email"]', 'input[type="month"]', 'input[type="number"]', 'input[type="password"]', 'input[type="search"]', 'input[type="tel"]', 'input[type="time"]', 'input[type="url"]', 'input[type="week"]', 'input:not([type])', '[contenteditable]:not([contenteditable="false"])', 'textarea']
}
#+end_src

Make characters in hint strings uppercase.
# Type: Bool
#+begin_src python
c.hints.uppercase = False
#+end_src

* Which Key
=delay=: Time (in milliseconds) from pressing a key to seeing the key-hint dialog.
Type: Int

=blacklist=: Key-chains that shouldn't be shown in the key-hint dialog. Globs are supported, so `;*` will blacklist all key-chains starting with `;`. Use `*` to disable key-hints.
Type: List of String

#+begin_src python
c.keyhint.delay = 500
c.keyhint.blacklist = []
#+end_src

* Editor
Editor (and arguments) to use for the =edit-*= commands. The following placeholders are defined:  * ={file}=: Filename of the file to be edited. * ={line}=: Line in which the caret is found in the text. * ={column}=: Column in which the caret is found in the text. * ={line0}=: Same as ={line}=, but starting from index 0. * ={column0}=: Same as ={column}=, but starting from index 0.
Type: =ShellCommand=
#+begin_src python
c.editor.command = ['alacritty', '-e', 'vim', '-f', '{file}', '-c', 'normal {line}G{column0}l']
#+end_src

Encoding to use for the editor.
Type: Encoding
#+begin_src python
c.editor.encoding = 'utf-8'
#+end_src

* Content
=pdfjs=: Allow =pdf.js= to view PDF files in the browser. Note that the files can still be downloaded by clicking the download button in the =pdf.js= viewer.
=plugins=: Enable plugins in Web pages.
=prefers_reduced_motion=: Request websites to minimize non-essentials animations and motion. This results in the `prefers-reduced-motion` CSS media query to evaluate to `reduce` (rather than `no-preference`). On Windows, if this setting is set to False, the system-wide animation setting is considered.
=print_element_backgrounds=: Draw the background color and images also when the page is printed.
=private_browsing=: Open new windows in private browsing mode which does not record visited pages.
=proxy_dns_requests=: Send DNS requests over the configured proxy.
=site_specific_quirks=: Enable quirks (such as faked user agent headers) needed to get specific sites to work properly.
=webgl=: Enable WebGL.
Type: =Bool=

=proxy=: Proxy to use. In addition to the listed values, you can use a `socks://...` or `http://...` URL. Note that with QtWebEngine, it will take a couple of seconds until the change is applied, if this value is changed at runtime.
Valid values:
- system: Use the system wide proxy.
- none: Don't use any proxy

#+begin_src python
# c.content.pdfjs = False
# c.content.plugins = False
# c.content.prefers_reduced_motion = False
# c.content.print_element_backgrounds = True
c.content.private_browsing = False
# c.content.proxy_dns_requests = True
# c.content.site_specific_quirks.enabled = True
# c.content.webgl = True

# c.content.proxy = 'system'
#+end_src

Allow websites to register protocol handlers via `navigator.registerProtocolHandler`.
Type: =Bool=
Valid values:
- true
- false
- ask
#+begin_src python
# c.content.register_protocol_handler = 'ask'
#+end_src

Disable a list of named quirks. The js-string-replaceall quirk is needed for Nextcloud Calendar < 2.2.0 with QtWebEngine < 5.15.3. However, the workaround is not fully compliant to the ECMAScript spec and might cause issues on other websites, so it's disabled by default.
# Type: FlagList
Valid values:
- ua-whatsapp
- ua-google
- ua-slack
- ua-googledocs
- js-whatsapp-web
- js-discord
- js-string-replaceall
- js-globalthis
- js-object-fromentries
- misc-krunker
- misc-mathml-darkmode
#+begin_src python
# c.content.site_specific_quirks.skip = ['js-string-replaceall']
#+end_src

How to proceed on TLS certificate errors.
# Type: String
Valid values:
- ask: Ask how to proceed for every certificate error (unless non-overridable due to HSTS).
- ask-block-thirdparty: Ask how to proceed for normal page loads, but silently block resource loads.
- block: Automatically block loading on certificate errors.
- load-insecurely: Force loading pages despite certificate errors. This is *insecure* and should be avoided. Instead of using this, consider fixing the underlying issue or importing a self-signed certificate via `certutil` (or Chromium) instead.
#+begin_src python
# c.content.tls.certificate_errors = 'ask'
#+end_src

How navigation requests to URLs with unknown schemes are handled.
# Type: String
Valid values:
- disallow: Disallows all navigation requests to URLs with unknown schemes.
- allow-from-user-interaction: Allows navigation requests to URLs with unknown schemes that are issued from user-interaction (like a mouse-click), whereas other navigation requests (for example from JavaScript) are suppressed.
- allow-all: Allows all navigation requests to URLs with unknown schemes.
#+begin_src python
# c.content.unknown_url_scheme_policy = 'allow-from-user-interaction'
#+end_src

List of user stylesheet filenames to use.
# Type: List of File, or File
#+begin_src python
# c.content.user_stylesheets = ["~/.config/qutebrowser/solarized-everything-css/css/gruvbox/gruvbox-all-sites.css"]
#+end_src

Which interfaces to expose via WebRTC.
# Type: String
Valid values:
- all-interfaces: WebRTC has the right to enumerate all interfaces and bind them to discover public interfaces.
- default-public-and-private-interfaces: WebRTC should only use the default route used by http. This also exposes the associated default private address. Default route is the route chosen by the OS on a multi-homed endpoint.
- default-public-interface-only: WebRTC should only use the default route used by http. This doesn't expose any local addresses.
- disable-non-proxied-udp: WebRTC should only use TCP to contact peers or servers unless the proxy server supports UDP. This doesn't expose any local addresses either.
#+begin_src python
# c.content.webrtc_ip_handling_policy = 'all-interfaces'
#+end_src

Monitor load requests for cross-site scripting attempts. Suspicious scripts will be blocked and reported in the devtools JavaScript console. Note that bypasses for the XSS auditor are widely known and it can be abused for cross-site info leaks in some scenarios, see:
https://www.chromium.org/developers/design-documents/xss-auditor
# Type: =Bool=
#+begin_src python
# c.content.xss_auditing = False
#+end_src

* History
Maximum time (in minutes) between two history items for them to be considered being from the same browsing session. Items with less time between them are grouped when being displayed in `:history`. Use -1 to disable separation.
Type: =Int=
#+begin_src python
c.history_gap_interval = 30
#+end_src

* File Select
=handler=: Handler for selecting file(s) in forms. If =external=, then the commands specified by =fileselect.single_file.command= and =fileselect.multiple_files.command= are used to select one or multiple files respectively.
Type: =String=
Valid values:
- =default=: Use the default file selector.
- =external=: Use an external command.

=command=: Command (and arguments) to use for selecting a =single folder=, =single/multiple files= in forms.
The command should write the selected path to the specified file or =stdout=.
The following placeholders are defined: * ={}=: Filename of the file to be written to. If not contained in any argument, the standard output of the command is read instead.
Type: =ShellCommand=

#+begin_src python
c.fileselect.handler = 'external'
#+end_src

Vifm
#+begin_src python
c.fileselect.folder.command = ['alacritty', '--class', 'dialog,dialog', '-e', 'vifmrun', '--choose-dir', '{}']
c.fileselect.single_file.command = ['alacritty', '--class', 'dialog,dialog', '-e', 'vifmrun', '--choose-files', '{}']
c.fileselect.multiple_files.command = ['alacritty', '--class', 'dialog,dialog', '-e', 'vifmrun', '--choose-files', '{}']
#+end_src

Ranger
#+begin_src python
# c.fileselect.single_file.command = ['alacritty', '--class', 'dialog,dialog', '-e', 'ranger', '--choosefile={}']
# c.fileselect.multiple_files.command = ['alacritty', '--class', 'dialog,dialog', '-e', 'ranger', '--choosefiles={}']
#+end_src

* Input
Allow Escape to quit the crash reporter.
Type: =Bool=
#+begin_src python
c.input.escape_quits_reporter = True
#+end_src

Which unbound keys to forward to the =webview= in normal mode.
Type: =String=
Valid values:
- all: Forward all unbound keys.
- auto: Forward unbound non-alphanumeric keys.
- none: Don't forward any keys.
#+begin_src python
c.input.forward_unbound_keys = 'auto'
#+end_src

Enter insert mode if an editable element is clicked.
Type: =Bool=
#+begin_src python
c.input.insert_mode.auto_enter = True
#+end_src

Leave insert mode if a non-editable element is clicked.
Type: =Bool=
#+begin_src python
c.input.insert_mode.auto_leave = False
#+end_src

Automatically enter insert mode if an editable element is focused after loading the page.
Type: =Bool=
#+begin_src python
c.input.insert_mode.auto_load = False
#+end_src

Leave insert mode when starting a new page load. Patterns may be unreliable on this setting, and they may match the url you are navigating to, or the URL you are navigating from.
Type: =Bool=
#+begin_src python
c.input.insert_mode.leave_on_load = True
#+end_src

Switch to insert mode when clicking flash and other plugins.
Type: =Bool=
#+begin_src python
c.input.insert_mode.plugins = False
#+end_src

Include hyperlinks in the keyboard focus chain when tabbing.
Type: =Bool=
#+begin_src python
c.input.links_included_in_focus_chain = False
#+end_src

Whether the underlying Chromium should handle media keys. On Linux, disabling this also disables Chromium's MPRIS integration.
Type: =Bool=
#+begin_src python
c.input.media_keys = True
#+end_src

Enable back and forward buttons on the mouse.
Type: =Bool=
#+begin_src python
c.input.mouse.back_forward_buttons = True
#+end_src

Enable Opera-like mouse rocker gestures. This disables the context menu.
Type: =Bool=
#+begin_src python
c.input.mouse.rocker_gestures = False
#+end_src

Timeout (in milliseconds) for partially typed key bindings. If the current input forms only partial matches, the =keystring= will be cleared after this time. If set to 0, partially typed bindings are never cleared.
Type: Int
#+begin_src python
c.input.partial_timeout = 30000
#+end_src

Enable spatial navigation. Spatial navigation consists in the ability to navigate between focusable elements in a Web page, such as hyperlinks and form controls, by using Left, Right, Up and Down arrow keys. For example, if the user presses the Right key, heuristics determine whether there is an element he might be trying to reach towards the right and which element he probably wants.
Type: =Bool=
#+begin_src python
c.input.spatial_navigation = False
#+end_src

* Search
When to find text on a page case-insensitively.
Type: =IgnoreCase=
Valid values:
- always: Search case-insensitively.
- never: Search case-sensitively.
- smart: Search case-sensitively if there are capital characters.
#+begin_src python
c.search.ignore_case = 'smart'
#+end_src

Find text on a page incrementally, renewing the search for each typed character.
Type: =Bool=
#+begin_src python
c.search.incremental = True
#+end_src

Wrap around at the top and bottom of the page when advancing through text matches using `:search-next` and `:search-prev`.
Type: =Bool=
#+begin_src python
c.search.wrap = True
#+end_src

* Mouse
** Tabs
Open new tabs (middle-click/ctrl+click) in the background.
Type: =Bool=
#+begin_src python
c.tabs.background = True
#+end_src

Mouse button with which to close tabs.
Type: =String=
Valid values:
- right: Close tabs on right-click.
- middle: Close tabs on middle-click.
- none: Don't close tabs using the mouse.
#+begin_src python
c.tabs.close_mouse_button = 'middle'
#+end_src

How to behave when the close mouse button is pressed on the tab bar.
Type: =String=
Valid values:
- new-tab: Open a new tab.
- close-current: Close the current tab.
- close-last: Close the last tab.
- ignore: Don't do anything.
#+begin_src python
c.tabs.close_mouse_button_on_bar = 'new-tab'
#+end_src

Switch between tabs using the mouse wheel.
Type: =Bool=
#+begin_src python
c.tabs.mousewheel_switching = False
#+end_src

* Qt
Additional arguments to pass to Qt, without leading --. With ==QtWebEngine==,some Chromium arguments (see https://peter.sh/experiments/chromium-command-line-switches/ for a list) will work.
# Type: List of String
#+begin_src python
# c.qt.args = []
#+end_src

Additional environment variables to set. Setting an environment variable to null/None will unset it.
# Type: Dict
#+begin_src python
# c.qt.environ = {}
#+end_src

Force a Qt platform to use. This sets the =QT_QPA_PLATFORM= environment variable and is useful to force using the XCB plugin when running =QtWebEngine= on =Wayland=.
# Type: String
#+begin_src python
# c.qt.force_platform = None
#+end_src

Force a Qt =platformtheme= to use. This sets the =QT_QPA_PLATFORMTHEME= environment variable which controls dialogs like the file-picker. By default, Qt determines the platform theme based on the desktop environment.
# Type: String
#+begin_src python
# c.qt.force_platformtheme = None
#+end_src

Force software rendering for =QtWebEngine=. This is needed for =QtWebEngine= to work with =Nouveau= drivers and can be useful in other scenarios related to graphic issues.
# Type: String
Valid values:
- =software-opengl=: Tell =LibGL= to use a software implementation of GL (=LIBGL_ALWAYS_SOFTWARE= / =QT_XCB_FORCE_SOFTWARE_OPENGL=)
- =qt-quick=: Tell Qt Quick to use a software renderer instead of =OpenGL=. (=QT_QUICK_BACKEND=software=)
- =chromium=: Tell Chromium to disable GPU support and use =Skia= software rendering instead. (=--disable-gpu=)
- =none=: Don't force software rendering.

#+begin_src python
c.qt.force_software_rendering = 'none'
#+end_src

Turn on Qt =HighDPI= scaling. This is equivalent to setting QT_AUTO_SCREEN_SCALE_FACTOR=1 or QT_ENABLE_HIGHDPI_SCALING=1 (Qt >= 5.14) in the environment. It's off by default as it can cause issues with some bitmap fonts. As an alternative to this, it's possible to set font sizes and the =zoom.default= setting.
# Type: =Bool=
#+begin_src python
# c.qt.highdpi = False
#+end_src

When to use Chromium's low-end device mode. This improves the RAM usage of renderer processes, at the expense of performance.
# Type: String
Valid values:
- always: Always use low-end device mode.
- auto: Decide automatically (uses low-end mode with < 1 GB available RAM).
- never: Never use low-end device mode.
#+begin_src python
c.qt.chromium.low_end_device_mode = 'auto'
#+end_src

Which Chromium process model to use. Alternative process models use less resources, but decrease security and robustness. See the following pages for more details:
- https://www.chromium.org/developers/design-documents/process-models
- https://doc.qt.io/qt-5/qtwebengine-features.html#process-models
# Type: String
Valid values:
- process-per-site-instance: Pages from separate sites are put into separate processes and separate visits to the same site are also isolated.
- process-per-site: Pages from separate sites are put into separate processes. Unlike Process per Site Instance, all visits to the same site will share an OS process. The benefit of this model is reduced memory consumption, because more web pages will share processes. The drawbacks include reduced security, robustness, and responsiveness.
- single-process: Run all tabs in a single process. This should be used for debugging purposes only, and it disables =:open --private=.
#+begin_src python
c.qt.chromium.process_model = 'process-per-site-instance'
#+end_src

Work around locale parsing issues in =QtWebEngine= 5.15.3. With some locales, =QtWebEngine= 5.15.3 is unusable without this workaround. In affected scenarios, =QtWebEngine= will log "Network service crashed, restarting service." and only display a blank page. However, It is expected that distributions shipping =QtWebEngine= 5.15.3 follow up with a proper fix soon, so it is disabled by default.
# Type: =Bool=
#+begin_src python
# c.qt.workarounds.locale = False
#+end_src

Delete the =QtWebEngine= Service Worker directory on every start. This workaround can help with certain crashes caused by an unknown =QtWebEngine= bug related to Service Workers. Those crashes happen seemingly immediately on Windows; after one hour of operation on other systems. Note however that enabling this option *can lead to data loss* on some pages (as Service Worker data isn't persisted) and will negatively impact start-up time.
# Type: =Bool=
#+begin_src python
# c.qt.workarounds.remove_service_workers = False
#+end_src

* Logging
Level for console (stdout/stderr) logs. Ignored if the `--loglevel` or `--debug` CLI flags are used.
Type: LogLevel
Valid values:
- vdebug
- debug
- info
- warning
- error
- critical
#+begin_src python
# c.logging.level.console = 'info'
#+end_src

Level for in-memory logs.
Type: LogLevel
Valid values:
- vdebug
- debug
- info
- warning
- error
- critical
#+begin_src python
# c.logging.level.ram = 'debug'
#+end_src

* Overwrites
#+begin_src python
if os.path.isfile(os.path.expanduser('~/.config/qutebrowser/local.py')):
    config.source('local.py')
#+end_src
