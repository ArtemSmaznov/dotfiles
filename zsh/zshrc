# VIM mode - comment this out if you are not comfirtable with vim or kniw what vim is
bindkey -v

unsetopt beep # Disable the bell

setopt autocd # auto cd when entering just the path

if [[ "$TERM" == "dumb" ]]
then
    unsetopt zle
    unsetopt prompt_cr
    unsetopt prompt_subst
    unfunction precmd
    unfunction preexec
    PS1='$ '
fi

# History
export SAVEHIST=10000
export HISTSIZE=10000

# Causes zsh to append to history instead of overwriting it so if you start a new terminal, you have old session history
setopt INC_APPEND_HISTORY

# Don't put duplicate lines in the history and do not add lines that start with a space
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE

# Make local bin files usable
path+=($HOME/.local/bin)
path+=($HOME/.local/bin/dm-scripts)
path+=($XDG_CONFIG_HOME/emacs/bin)

### SET MANPAGER
export MANPAGER="vim -c ASMANPAGER -"

fpath=($XDG_CONFIG_HOME/zsh/completion $fpath)
zstyle :compinstall filename "$HOME/.zshrc"

# Autocompletion
autoload bashcompinit && bashcompinit # for aws cli
autoload -Uz compinit && compinit # Load autocompletion
zstyle ':completion::complete:*' gain-privileges 1 # Enable aliases for Sudo commands
zstyle ':completion:*' menu select
zstyle ':completion:*' rehash true                 # automatically rehash bin files
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'

zstyle -e ':completion:*:default' list-colors 'reply=("${PREFIX:+=(#bi)($PREFIX:t)(?)*==02=01}:${(s.:.)LS_COLORS}")' # Color the common prefix

# enable history search
autoload -Uz up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search

# extra completions
[[ $commands[kubectl] ]] && source <(kubectl completion zsh)
[[ $commands[beet] ]] && eval $(beet completion)

# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -g -A key

key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[Shift-Tab]="${terminfo[kcbt]}"
key[Control-Left]="${terminfo[kLFT5]}"
key[Control-Right]="${terminfo[kRIT5]}"

# setup key accordingly
[[ -n "${key[Home]}"          ]] && bindkey -- "${key[Home]}"          beginning-of-line
[[ -n "${key[End]}"           ]] && bindkey -- "${key[End]}"           end-of-line
[[ -n "${key[Backspace]}"     ]] && bindkey -- "${key[Backspace]}"     backward-delete-char
[[ -n "${key[Delete]}"        ]] && bindkey -- "${key[Delete]}"        delete-char
[[ -n "${key[Up]}"            ]] && bindkey -- "${key[Up]}"            up-line-or-beginning-search
[[ -n "${key[Down]}"          ]] && bindkey -- "${key[Down]}"          down-line-or-beginning-search
[[ -n "${key[Left]}"          ]] && bindkey -- "${key[Left]}"          backward-char
[[ -n "${key[Right]}"         ]] && bindkey -- "${key[Right]}"         forward-char
[[ -n "${key[PageUp]}"        ]] && bindkey -- "${key[PageUp]}"        beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"      ]] && bindkey -- "${key[PageDown]}"      end-of-buffer-or-history
[[ -n "${key[Shift-Tab]}"     ]] && bindkey -- "${key[Shift-Tab]}"     reverse-menu-complete
[[ -n "${key[Control-Left]}"  ]] && bindkey -- "${key[Control-Left]}"  backward-word
[[ -n "${key[Control-Right]}" ]] && bindkey -- "${key[Control-Right]}" forward-word

# Bind ctrl + space to accept the current suggestion.
bindkey '^ ' end-of-line

# Bind Alt + . to insert last argument
bindkey '^[.' insert-last-word

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
  autoload -Uz add-zle-hook-widget
  function zle_application_mode_start { echoti smkx }
  function zle_application_mode_stop { echoti rmkx }
  add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
  add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

function source_config() {
  [ -f $1 ] && source $1
}

# Primary imports
source_config $XDG_CONFIG_HOME/shell/exportrc
source_config $XDG_CONFIG_HOME/shell/aliasrc
source_config $XDG_CONFIG_HOME/shell/wol
source_config $XDG_CONFIG_HOME/zsh/localrc

# FZF configs
source_config /usr/share/fzf/key-bindings.zsh
source_config /usr/share/fzf/completion.zsh

# MPC configs
source_config $XDG_CONFIG_HOME/mpc/mpcvars

# Plugins - need to be loaded at the very end
source_config /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source_config /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh

function has_command() {
    hash "$1" 2>/dev/null
    return $?
}

# Source the Starship Prompt
if has_command starship; then eval "$(starship init zsh)"; fi

# Script to run on terminal launch
if has_command fastfetch; then fastfetch; fi
