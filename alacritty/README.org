:PROPERTIES:
:ID:       cc15ed49-6823-4a56-8cbb-a3cd1148fbcf
:END:
#+title:       Alacritty
#+author:      Artem Smaznov
#+description: Alacritty is a simple, GPU-accelerated terminal emulator written in Rust. It supports scrollback, truecolor, copy/paste, clicking on URLS, and custom key bindings.
#+startup:     overview
#+auto_tangle: t
#+property:    header-args :tangle ~/.config/alacritty/alacritty.toml

* Table of Contents :toc:
- [[#general][General]]
  - [[#imports][Imports]]
  - [[#shell][Shell]]
  - [[#working-directory][Working Directory]]
  - [[#live-config-reload][Live Config Reload]]
  - [[#ipc-socket][IPC Socket]]
- [[#env][Env]]
- [[#window][Window]]
  - [[#dynamic-title][Dynamic Title]]
  - [[#dynamic-padding][Dynamic Padding]]
  - [[#option-as-alt][Option As ALT]]
  - [[#padding][Padding]]
  - [[#idea-dimensions][IDEA Dimensions]]
  - [[#idea-position][IDEA Position]]
  - [[#idea-decorations][IDEA Decorations]]
  - [[#idea-opacity][IDEA Opacity]]
  - [[#idea-blur][IDEA Blur]]
  - [[#idea-startup_mode][IDEA Startup_mode]]
  - [[#idea-title][IDEA Title]]
  - [[#idea-class][IDEA Class]]
  - [[#idea-decorations-theme-variant][IDEA Decorations Theme Variant]]
  - [[#idea-resize-increments][IDEA Resize Increments]]
- [[#scrolling][Scrolling]]
  - [[#history][History]]
  - [[#multiplier][Multiplier]]
- [[#font][Font]]
  - [[#normal][Normal]]
  - [[#bold][Bold]]
  - [[#italic][Italic]]
  - [[#bold-italic][Bold Italic]]
  - [[#idea-size][IDEA Size]]
  - [[#idea-offset][IDEA Offset]]
  - [[#idea-glyph-offset][IDEA Glyph Offset]]
  - [[#idea-builtin-box-drawing][IDEA Builtin Box Drawing]]
- [[#bell][Bell]]
  - [[#idea-animation][IDEA Animation]]
  - [[#idea-duration][IDEA Duration]]
  - [[#idea-color][IDEA Color]]
  - [[#idea-command][IDEA Command]]
- [[#selection][Selection]]
  - [[#idea-semantic-escape-chars][IDEA Semantic Escape Chars]]
  - [[#idea-save-to-clipboard][IDEA Save to Clipboard]]
- [[#cursor][Cursor]]
  - [[#unfocused-hollow][Unfocused Hollow]]
  - [[#style][Style]]
  - [[#idea-vi-mode-style][IDEA Vi Mode Style]]
  - [[#idea-blink-interval][IDEA Blink Interval]]
  - [[#idea-blink-timeout][IDEA Blink Timeout]]
  - [[#idea-thickness][IDEA Thickness]]
- [[#mouse][Mouse]]
  - [[#idea-hide-when-typing][IDEA Hide When Typing]]
  - [[#idea-bindings][IDEA Bindings]]
- [[#hints][Hints]]
  - [[#alphabet][Alphabet]]
  - [[#enabled][Enabled]]
- [[#key-bindings][Key Bindings]]
- [[#debug][Debug]]
  - [[#render-timer][Render Timer]]
  - [[#persistent-logging][Persistent Logging]]
  - [[#log-level][Log Level]]
  - [[#renderer][Renderer]]
  - [[#print-events][Print Events]]
  - [[#highlight-damage][Highlight Damage]]
  - [[#prefer-egl][Prefer EGL]]

* General
** Imports
Import additional configuration files

Imports are loaded in order, skipping all missing files, with the importing
file being loaded last. If a field is already present in a previous import, it
will be replaced.

All imports must either be absolute paths starting with ~/~, or paths relative
to the user's home directory starting with ~~/~.

#+begin_src toml
general.import = [
  "~/.config/alacritty/themes/base16.toml",
  "~/.config/alacritty/local.toml"
]
#+end_src

** Shell
shell = "<string>" | { program = "<string>", args = ["<string>",] }

You can set shell.program to the path of your favorite shell, e.g. /bin/zsh. Entries in shell.args are passed as arguments to the shell.

Default:

Linux/BSD/macOS: $SHELL or the user's login shell, if $SHELL is unset
Windows: "powershell"

Example:

#+begin_example toml
[shell]
program = "/bin/zsh"
args = ["-l"]
#+end_example

** Working Directory
Directory the shell is started in. When this is unset, or "None", the working directory of the parent process will be used.
Default: "None"

#+begin_src toml
working_directory = "None"
#+end_src

** Live Config Reload
Live config reload (changes require restart)
Default: true

#+begin_src toml
general.live_config_reload = true
#+end_src

** IPC Socket
Offer IPC using ~alacritty msg~
Default: true

#+begin_src toml
#ipc_socket = true
#+end_src

* Env
All key-value pairs in the [env] section will be added as environment variables for any process spawned by Alacritty, including its shell. Some entries may override variables set by alacritty itself.

#+begin_example toml
[env]
WINIT_X11_SCALE_FACTOR = "1.0"
#+end_example

* Window
#+begin_src toml
[window]
#+end_src
** Dynamic Title
Allow terminal applications to change Alacritty's window title.
Default: true

#+begin_src toml
dynamic_title = true
#+end_src

** Dynamic Padding
Spread additional padding evenly around the terminal content.
Default: false

#+begin_src toml
dynamic_padding = false
#+end_src

** Option As ALT
Make Option key behave as Alt.
Default: "None"

#+begin_src toml
# option_as_alt = "Both" # (macos only)
#+end_src

** Padding
Blank space added around the window in pixels. This padding is scaled by DPI and the specified value is always added at both opposing sides.
Default: { x = 0, y = 0 }

#+begin_src toml
[window.padding]
x = 5
y = 5
#+end_src

** IDEA Dimensions
dimensions = { columns = <integer>, lines = <integer> }

Window dimensions (changes require restart).

Number of lines/columns (not pixels) in the terminal. Both lines and columns must be non-zero for this to take effect. The number of columns must be at least 2, while using a value of 0 for columns and lines will fall back to the window manager's recommended size

Default: { column = 0, lines = 0 }

** IDEA Position
position = "None" | { x = <integer>, y = <integer> }

Window startup position.

Specified in number of pixels.

If the position is "None", the window manager will handle placement.

Default: "None"

** IDEA Decorations
decorations = "Full" | "None" | "Transparent" | "Buttonless"

Window decorations.

Full

Borders and title bar.

None

Neither borders nor title bar.

Transparent (macOS only)

Title bar, transparent background and title bar buttons.

Buttonless (macOS only)

Title bar, transparent background and no title bar buttons.

Default: "Full"

** IDEA Opacity
opacity = <float>

Background opacity as a floating point number from 0.0 to 1.0. The value 0.0 is completely transparent and 1.0 is opaque.

Default: 1.0

** IDEA Blur
blur = true | false # (works on macOS/KDE Wayland)

Request compositor to blur content behind transparent windows.

Default: false

** IDEA Startup_mode
startup_mode = "Windowed" | "Maximized" | "Fullscreen" | "SimpleFullscreen"

Startup mode (changes require restart)

Windowed

Regular window.

Maximized

The window will be maximized on startup.

Fullscreen

The window will be fullscreened on startup.

SimpleFullscreen (macOS only)

Same as Fullscreen, but you can stack windows on top.

Default: "Windowed"

** IDEA Title
title = "<string>"

Window title.

Default: "Alacritty"

** IDEA Class
class = { instance = "<string>", general = "<string>" } # (Linux/BSD only)

Window class.

On Wayland, general is used as app_id and instance is ignored.

Default: { instance = "Alacritty", general = "Alacritty" }

** IDEA Decorations Theme Variant
decorations_theme_variant = "Dark" | "Light" | "None"

Override the variant of the System theme/GTK theme/Wayland client side decorations. Set this to "None" to use the system's default theme variant.

Default: "None"

** IDEA Resize Increments
resize_increments = true | false

Prefer resizing window by discrete steps equal to cell dimensions.

Default: false

* Scrolling
#+begin_src toml
[scrolling]
#+end_src

** History
history = <integer>

Maximum number of lines in the scrollback buffer.
Specifying 0 will disable scrolling.
Limited to 100000.
Default: 10000

** Multiplier
multiplier = <integer>

Number of line scrolled for every input scroll increment.
Default: 3

* Font
** Normal
normal = { family = "<string>", style = "<string>" }

Default:

Linux/BSD: { family = "monospace", style = "Regular" }
Windows: { family = "Consolas", style = "Regular" }
macOS: { family = "Menlo", style = "Regular" }

#+begin_src toml
[font.normal]
family = "Hack Nerd Font Mono"
style = "Regular"
#+end_src

** Bold
bold = { family = "<string>", style = "<string>" }

If the family is not specified, it will fall back to the value specified for the normal font.

Default: { style = "Bold" }

#+begin_src toml
[font.bold]
family = "Hack Nerd Font Mono"
style = "Bold"
#+end_src

** Italic
italic = { family = "<string>", style = "<string>" }

If the family is not specified, it will fall back to the value specified for the normal font.

Default: { style = "Italic" }

#+begin_src toml
[font.italic]
family = "Hack Nerd Font Mono"
style = "Italic"
#+end_src

** Bold Italic
bold_italic = { family = "<string>", style = "<string>" }

If the family is not specified, it will fall back to the value specified for the normal font.

Default: { style = "Bold Italic" }

#+begin_src toml
[font.bold_italic]
family = "Hack Nerd Font Mono"
style = "Bold Italic"
#+end_src

** IDEA Size
size = <float>

Font size in points.

Default: 11.25

** IDEA Offset
offset = { x = <integer>, y = <integer> }

Offset is the extra space around each character. y can be thought of as modifying the line spacing, and x as modifying the letter spacing.

Default: { x = 0, y = 0 }

** IDEA Glyph Offset
glyph_offset = { x = <integer>, y = <integer> }

Glyph offset determines the locations of the glyphs within their cells with the default being at the bottom. Increasing x moves the glyph to the right, increasing y moves the glyph upward.

** IDEA Builtin Box Drawing
builtin_box_drawing = true | false

When true, Alacritty will use a custom built-in font for box drawing characters (Unicode points U+2500 - U+259F) and powerline symbols (Unicode points U+E0B0 - U+E0B3).

Default: true

* Bell
#+begin_src toml
[bell]
#+end_src
** IDEA Animation
animation = "Ease" | "EaseOut" | "EaseOutSine" | "EaseOutQuad" | "EaseOutCubic" | "EaseOutQuart" | "EaseOutQuint" | "EaseOutExpo" | "EaseOutCirc" | "Linear"

Visual bell animation effect for flashing the screen when the visual bell is rung.

Default: "Linear"

** IDEA Duration
duration = <integer>

Duration of the visual bell flash in milliseconds. A `duration` of `0` will disable the visual bell animation.

Default: 0

** IDEA Color
color = "<string>"

Visual bell animation color.

Default: "#ffffff"

** IDEA Command
command = "<string>" | { program = "<string>", args = ["<string>",] }

This program is executed whenever the bell is rung.

When set to "None", no command will be executed.

Default: "None"

* Selection
#+begin_src toml
[selection]
#+end_src
** IDEA Semantic Escape Chars
semantic_escape_chars = "<string>"

This string contains all characters that are used as separators for "semantic words" in Alacritty.

Default: ",│`|:\"' ()[]{}<>\t"

** IDEA Save to Clipboard
save_to_clipboard = true | false

When set to true, selected text will be copied to the primary clipboard.

Default: false

* Cursor
#+begin_src toml
[cursor]
#+end_src
** Unfocused Hollow
When this is true, the cursor will be rendered as a hollow box when the window is not focused.
Default: true

#+begin_src toml
unfocused_hollow = true
#+end_src

** Style
shape = "▇ Block" | "_ Underline" | "| Beam"
    #   - ▇ Block
    #   - _ Underline
    #   - | Beam
Default: "Block"

blinking = "Never" | "Off" | "On" | "Always"
|--------+---------------------------------------|
| Never  | Prevent the cursor from ever blinking |
| Off    | Disable blinking by default           |
| On     | Enable blinking by default            |
| Always | Force the cursor to always blink      |
|--------+---------------------------------------|
Default: "Off"

#+begin_src toml
[cursor.style]
blinking = "Off"
shape = "Block"
#+end_src

** IDEA Vi Mode Style
vi_mode_style = { <shape>, <blinking> } | "None"

If the vi mode cursor style is "None" or not specified, it will fall back to the active value of the normal cursor.

Default: "None"

** IDEA Blink Interval
blink_interval = <integer>

Cursor blinking interval in milliseconds.

Default: 750

** IDEA Blink Timeout
blink_timeout = <integer>

Time after which cursor stops blinking, in seconds.

Specifying 0 will disable timeout for blinking.

Default: 5

** IDEA Thickness
thickness = <float>

Thickness of the cursor relative to the cell width as floating point number from 0.0 to 1.0.

Default: 0.15

* Mouse
#+begin_src toml
[mouse]
#+end_src
** IDEA Hide When Typing
hide_when_typing = true | false

When this is true, the cursor is temporarily hidden when typing.
Default: false

** IDEA Bindings
bindings = [{ <mouse>, <mods>, <mode>, <action> | <chars> },]

See keyboard.bindings for full documentation on mods, mode, action, and chars.

When an application running within Alacritty captures the mouse, the `Shift` modifier can be used to suppress mouse reporting. If no action is found for the event, actions for the event without the `Shift` modifier are triggered instead.

mouse = "Middle" | "Left" | "Right" | "Back" | "Forward" | <integer>

Mouse button which needs to be pressed to trigger this binding.

action = <keyboard.bindings.action> | "ExpandSelection"

ExpandSelection

Expand the selection to the current mouse cursor location.

Example:

[mouse]
bindings = [
{ mouse = "Right", mods = "Control", action = "Paste" },
]

* Hints
#+begin_src toml
[hints]
#+end_src
** Alphabet
Keys used for the hint labels.
Default: "jfkdls;ahgurieowpq"

#+begin_src toml
alphabet = "jfkds;ahgureowpq"
#+end_src

** Enabled
#+begin_src toml
[[hints.enabled]]
#+end_src
Each hint must have at least one of regex or hyperlinks and either an action or
a command.
*** Regex
Regex each line will be compared against.

#+begin_src toml
regex = "(ipfs:|ipns:|magnet:|mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)[^\u0000-\u001F\u007F-<>\"\\s{-}\\^⟨⟩`]+"
#+end_src

*** Hyperlinks
When this is true, all OSC 8 escape sequence hyperlinks will be included in the hints.

#+begin_src toml
hyperlinks = true
#+end_src

*** Post Processing
When this is true, heuristics will be used to shorten the match if there are characters likely not to be part of the hint (e.g. a trailing .). This is most useful for URIs and applies only to regex matches.

#+begin_src toml
post_processing = true
#+end_src

*** IDEA Persist
persist = true | false

When this is true, hints remain persistent after selection.

*** IDEA Action
action = "Copy" | "Paste" | "Select" | "MoveViModeCursor"

Copy

Copy the hint's text to the clipboard.

Paste

Paste the hint's text to the terminal or search.

Select

Select the hint's text.

MoveViModeCursor

Move the vi mode cursor to the beginning of the hint.

*** Command
Command which will be executed when the hint is clicked or selected with the binding.
The hint's text is always attached as the last argument.

#+begin_src toml
command = "xdg-open"
#+end_src

*** Binding
binding = { key = "<string>", mods = "<string>", mode = "<string>" }

See keyboard.bindings for documentation on available values.

This controls which key binding is used to start the keyboard hint selection process.

#+begin_src toml
[hints.enabled.binding]
key = "F"
mods = "Control"
#+end_src

*** Mouse
mouse = { mods = "<string>", enabled = true | false }

See keyboard.bindings for documentation on available mods.

The enabled field controls if the hint should be underlined when hovering over the hint text with all mods pressed.

#+begin_src toml
[hints.enabled.mouse]
enabled = true
mods = "None"
#+end_src

* Key Bindings
#+begin_src toml
[keyboard]
#+end_src
bindings = [{ <key>, <mods>, <mode>, <action> | <chars> },]

To unset a default binding, you can use the action "ReceiveChar" to remove it or "None" to inhibit any action.

Multiple keybindings can be triggered by a single key press and will be executed in the order they are defined in.

key = "<string>"

The regular keys like "A", "0", and "Я" can be mapped directly without any special syntax. Full list of named keys like "F1" and the syntax for dead keys can be found here:

https://docs.rs/winit/latest/winit/keyboard/enum.NamedKey.html
https://docs.rs/winit/latest/winit/keyboard/enum.Key.html#variant.Dead

Numpad keys are prefixed by Numpad: "NumpadEnter" | "NumpadAdd" | "NumpadComma" | "NumpadDivide" | "NumpadEquals" | "NumpadSubtract" | "NumpadMultiply" | "Numpad[0-9]".

The key field also supports using scancodes, which are specified as a decimal number.

mods = "Command" | "Control" | "Option" | "Super" | "Shift" | "Alt"

Multiple modifiers can be combined using |, like this: "Control | Shift".

mode = "AppCursor" | "AppKeypad" | "Search" | "Alt" | "Vi"

This defines a terminal mode which must be active for this binding to have an effect.

Prepending ~ to a mode will require the mode to not = be active for the binding to take effect.

Multiple modes can be combined using |, like this: "~Vi|Search".

chars = "<string>"

Writes the specified string to the terminal.

action

ReceiveChar

Allow receiving char input.

None

No action.

Paste

Paste contents of system clipboard.

Copy

Store current selection into clipboard.

IncreaseFontSize

Increase font size.

DecreaseFontSize

Decrease font size.

ResetFontSize

Reset font size to the config value.

ScrollPageUp

Scroll exactly one page up.

ScrollPageDown

Scroll exactly one page down.

ScrollHalfPageUp

Scroll half a page up.

ScrollHalfPageDown

Scroll half a page down.

ScrollLineUp

Scroll one line up.

ScrollLineDown

Scroll one line down.

ScrollToTop

Scroll all the way to the top.

ScrollToBottom

Scroll all the way to the bottom.

ClearHistory

Clear the display buffer(s) to remove history.

Hide

Hide the Alacritty window.

Minimize

Minimize the Alacritty window.

Quit

Quit Alacritty.

ClearLogNotice

Clear warning and error notices.

SpawnNewInstance

Spawn a new instance of Alacritty.

CreateNewWindow

Create a new Alacritty window.

ToggleFullscreen

Toggle fullscreen.

ToggleMaximized

Toggle maximized.

ClearSelection

Clear active selection.

ToggleViMode

Toggle vi mode.

SearchForward

Start a forward buffer search.

SearchBackward

Start a backward buffer search.

Vi mode actions:

Up

Move up.

Down

Move down.

Left

Move left.

Right

Move right.

First

First column, or beginning of the line when already at the first column.

Last

Last column, or beginning of the line when already at the last column.

FirstOccupied

First non-empty cell in this terminal row, or first non-empty cell of the line when already at the first cell of the row.

High

Move to top of screen.

Middle

Move to center of screen.

Low

Move to bottom of screen.

SemanticLeft

Move to start of semantically separated word.

SemanticRight

Move to start of next semantically separated word.

SemanticLeftEnd

Move to end of previous semantically separated word.

SemanticRightEnd

Move to end of semantically separated word.

WordLeft

Move to start of whitespace separated word.

WordRight

Move to start of next whitespace separated word.

WordLeftEnd

Move to end of previous whitespace separated word.

WordRightEnd

Move to end of whitespace separated word.

Bracket

Move to opposing bracket.

ToggleNormalSelection

Toggle normal vi selection.

ToggleLineSelection

Toggle line vi selection.

ToggleBlockSelection

Toggle block vi selection.

ToggleSemanticSelection

Toggle semantic vi selection.

SearchNext

Jump to the beginning of the next match.

SearchPrevious

Jump to the beginning of the previous match.

SearchStart

Jump to the next start of a match to the left of the origin.

SearchEnd

Jump to the next end of a match to the right of the origin.

Open

Launch the URL below the vi mode cursor.

CenterAroundViCursor

Centers the screen around the vi mode cursor.

InlineSearchForward

Search forward within the current line.

InlineSearchBcakward

Search backward within the current line.

InlineSearchForwardShort

Search forward within the current line, stopping just short of the character.

InlineSearchBackwardShort

Search backward within the current line, stopping just short of the character.

InlineSearchNext

Jump to the next inline search match.

InlineSearchPrevious

Jump to the previous inline search match.

Search actions:

SearchFocusNext

Move the focus to the next search match.

SearchFocusPrevious

Move the focus to the previous search match.

SearchConfirm

Confirm the active search.

SearchCancel

Cancel the active search.

SearchClear

Reset the search regex.

SearchDeleteWord

Delete the last word in the search regex.

SearchHistoryPrevious

Go to the previous regex in the search history.

SearchHistoryNext

Go to the next regex in the search history.

macOS exclusive:

ToggleSimpleFullscreen

Enter fullscreen without occupying another space.

HideOtherApplications

Hide all windows other than Alacritty.

CreateNewTab

Create new window in a tab.

SelectNextTab

Select next tab.

SelectPreviousTab

Select previous tab.

SelectTab1

Select the first tab.

SelectTab2

Select the second tab.

SelectTab3

Select the third tab.

SelectTab4

Select the fourth tab.

SelectTab5

Select the fifth tab.

SelectTab6

Select the sixth tab.

SelectTab7

Select the seventh tab.

SelectTab8

Select the eighth tab.

SelectTab9

Select the ninth tab.

SelectLastTab

Select the last tab.

Linux/BSD exclusive:

CopySelection

Copy from the selection buffer.

PasteSelection

Paste from the selection buffer.

Default: See alacritty-bindings(5)

Example:

[keyboard]
bindings = [
{ key = "N", mods = "Control|Shift", action = "CreateNewWindow" },
{ key = "L", mods = "Control|Shift", chars = "l" },
]

* Debug
#+begin_src toml
[debug]
#+end_src
** Render Timer
render_timer = true | false

Display the time it takes to draw each frame.

Default: false

** Persistent Logging
persistent_logging = true | false

Keep the log file after quitting Alacritty.

Default: false

** Log Level
log_level = "Off" | "Error" | "Warn" | "Info" | "Debug" | "Trace"

Default: "Warn"

To add extra libraries to logging ALACRITTY_EXTRA_LOG_TARGETS variable can be used.

Example:

ALACRITTY_EXTRA_LOG_TARGETS="winit;vte" alacritty -vvv

** Renderer
renderer = "glsl3" | "gles2" | "gles2_pure" | "None"

Force use of a specific renderer, "None" will use the highest available one.

Default: "None"

** Print Events
print_events = true | false

Log all received window events.

Default: false

** Highlight Damage
highlight_damage = true | false

Highlight window damage information.

Default: false

** Prefer EGL
prefer_egl = true | false

Use EGL as display API if the current platform allows it. Note that transparency may not work with EGL on Linux/BSD.

Default: false
